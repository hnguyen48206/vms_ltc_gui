{"ast":null,"code":"import { __decorate as t } from \"tslib\";\nimport { baseStyles as s, hasStringPropertyChangedAndNotNil as e, hasStringPropertyChanged as i, pxToRem as r, GlobalStateService as o, isString as p, property as n, state as h } from \"@cds/core/internal\";\nimport { LitElement as a, html as d, svg as c } from \"lit\";\nimport { query as l } from \"lit/decorators/query.js\";\nimport y from \"./icon.element.scss.js\";\nimport { ClarityIcons as u } from \"./icon.service.js\";\nimport { updateIconSizeStyle as g } from \"./utils/icon.classnames.js\";\nimport { getIconSVG as f, getIconBadgeSVG as m } from \"./utils/icon.svg-helpers.js\";\nclass v extends a {\n  constructor() {\n    super(...arguments);\n    this._shape = \"unknown\", this.solid = !1, this.inverse = !1;\n  }\n  static get styles() {\n    return [s, y];\n  }\n  get shape() {\n    return this._shape;\n  }\n  set shape(t) {\n    if (e(t, this._shape)) {\n      const s = this._shape;\n      this._shape = t, this.requestUpdate(\"shape\", s);\n    }\n  }\n  get size() {\n    return this._size;\n  }\n  set size(t) {\n    if (i(t, this._size)) {\n      const s = this._size;\n      this._size = t, g(this, t), this.requestUpdate(\"size\", s);\n    }\n  }\n  updated(t) {\n    if (t.has(\"innerOffset\") && this.innerOffset > 0) {\n      const t = r(-1 * this.innerOffset),\n        s = `calc(100% + ${r(2 * this.innerOffset)})`;\n      this.svg.style.width = s, this.svg.style.height = s, this.svg.style.margin = `${t} 0 0 ${t}`;\n    }\n  }\n  firstUpdated(t) {\n    if (super.firstUpdated(t), this.isConnected) {\n      let t = \"unknown\";\n      this.subscription = o.stateUpdates.subscribe(s => {\n        \"iconRegistry\" === s.key && u.registry[this.shape] && t !== this.shape && (t = this.shape, this.requestUpdate(\"shape\"));\n      });\n    }\n  }\n  disconnectedCallback() {\n    var _this$subscription;\n    super.disconnectedCallback(), (_this$subscription = this.subscription) === null || _this$subscription === void 0 ? void 0 : _this$subscription.unsubscribe();\n  }\n  render() {\n    return p(u.registry[this.shape]) ? d`<span .innerHTML=\"${u.registry[this.shape]}\"></span>` : c`<svg .innerHTML=\"${f(this) + m(this)}\" viewBox=\"0 0 36 36\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\"></svg>`;\n  }\n}\nt([n({\n  type: String\n})], v.prototype, \"shape\", null), t([n({\n  type: String\n})], v.prototype, \"size\", null), t([n({\n  type: String\n})], v.prototype, \"direction\", void 0), t([n({\n  type: String\n})], v.prototype, \"flip\", void 0), t([n({\n  type: Boolean\n})], v.prototype, \"solid\", void 0), t([n({\n  type: String\n})], v.prototype, \"status\", void 0), t([n({\n  type: Boolean\n})], v.prototype, \"inverse\", void 0), t([n({\n  type: String\n})], v.prototype, \"badge\", void 0), t([h({\n  type: Number\n})], v.prototype, \"innerOffset\", void 0), t([l(\"svg\")], v.prototype, \"svg\", void 0);\nexport { v as CdsIcon };\n//# sourceMappingURL=icon.element.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}