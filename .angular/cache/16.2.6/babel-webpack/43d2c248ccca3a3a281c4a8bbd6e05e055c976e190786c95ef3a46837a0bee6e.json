{"ast":null,"code":"import { isJsdomTest as e } from \"./environment.js\";\nfunction t(e) {\n  e.preventDefault(), e.stopPropagation();\n}\nconst n = (t, n, r) => {\n  t.hasAttribute(n) ? r(t.getAttribute(n)) : void 0 !== t[n] && r(t[n]), !t._valueTracker || \"checked\" !== n && \"value\" !== n || (t._valueTracker = null);\n  const o = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t), n);\n  return o && !e() && Object.defineProperty(t, n, {\n    get: o.get,\n    set: e => {\n      r(e), o.set.call(t, e);\n    }\n  }), s(t, n, e => r(e));\n};\nfunction r(e) {\n  return new Promise(t => {\n    const n = () => {\n      t(null), e.__cdsTouched = !0;\n    };\n    e.__cdsTouched && t(null), e.addEventListener(\"mouseover\", n, {\n      once: !0,\n      passive: !0\n    }), e.addEventListener(\"touchstart\", n, {\n      once: !0,\n      passive: !0\n    }), e.addEventListener(\"keydown\", n, {\n      once: !0,\n      passive: !0\n    }), e.addEventListener(\"focus\", n, {\n      once: !0,\n      passive: !0\n    });\n  });\n}\nfunction o(e, t) {\n  const n = new MutationObserver(e => {\n    for (const n of e) \"childList\" === n.type && t(n);\n  });\n  return n.observe(e, {\n    childList: !0\n  }), n;\n}\nfunction s(e, t, n) {\n  const r = new MutationObserver(r => {\n    r.find(e => e.attributeName === t) && n(e.getAttribute(t));\n  });\n  return r.observe(e, {\n    attributes: !0\n  }), r;\n}\nfunction i(e, t, n) {\n  const r = new MutationObserver(r => {\n    const o = r.find(e => t.find(t => e.attributeName === t));\n    o && n(e.getAttribute(o.attributeName));\n  });\n  return r.observe(e, {\n    attributes: !0,\n    attributeFilter: t,\n    subtree: !0\n  }), r;\n}\nexport { n as getElementUpdates, s as listenForAttributeChange, i as listenForAttributeListChange, o as onChildListMutation, r as onFirstInteraction, t as stopEvent };\n//# sourceMappingURL=events.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}