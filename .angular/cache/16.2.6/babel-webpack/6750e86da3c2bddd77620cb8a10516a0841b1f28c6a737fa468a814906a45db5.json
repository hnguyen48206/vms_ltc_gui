{"ast":null,"code":"var fpsCount = 0;\nfunction Texture(gl) {\n  this.gl = gl;\n  this.texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, this.texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n}\nTexture.prototype.bind = function (n, program, name) {\n  var gl = this.gl;\n  gl.activeTexture([gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2][n]);\n  gl.bindTexture(gl.TEXTURE_2D, this.texture);\n  gl.uniform1i(gl.getUniformLocation(program, name), n);\n};\nTexture.prototype.fill = function (width, height, data) {\n  var gl = this.gl;\n  gl.bindTexture(gl.TEXTURE_2D, this.texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width, height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data);\n};\nfunction render(canvas, videoFrame, checkFps) {\n  if (checkFps) fpsCount++;\n  var gl = canvas.gl;\n  gl.y.fill(videoFrame.width, videoFrame.height, videoFrame.subarray(0, videoFrame.uOffset));\n  gl.u.fill(videoFrame.width >> 1, videoFrame.height >> 1, videoFrame.subarray(videoFrame.uOffset, videoFrame.vOffset));\n  gl.v.fill(videoFrame.width >> 1, videoFrame.height >> 1, videoFrame.subarray(videoFrame.vOffset, videoFrame.length));\n}\nvar renderFallback = function (canvas, videoFrame) {\n  console.log('Render Fallback');\n  var buf = canvas.img.data;\n  var width = videoFrame.width;\n  var height = videoFrame.height;\n  for (var i = 0; i < height; ++i) {\n    for (var j = 0; j < width; ++j) {\n      var o = (j + width * i) * 4;\n      buf[o + 0] = videoFrame[o + 2];\n      buf[o + 1] = videoFrame[o + 1];\n      buf[o + 2] = videoFrame[o + 0];\n      buf[o + 3] = videoFrame[o + 3];\n    }\n  }\n  ;\n  canvas.ctx.putImageData(canvas.img, 0, 0);\n};\nfunction setupCanvas(canvas, vlc, options) {\n  if (!options.fallbackRenderer) canvas.gl = canvas.getContext(\"webgl\", {\n    preserveDrawingBuffer: Boolean(options.preserveDrawingBuffer)\n  });\n  var gl = canvas.gl;\n  if (!gl || options.fallbackRenderer) {\n    console.log(options.fallbackRenderer ? \"Fallback renderer forced, not using WebGL\" : \"Unable to initialize WebGL, falling back to canvas rendering\");\n    vlc.pixelFormat = vlc.RV32;\n    canvas.ctx = canvas.getContext(\"2d\");\n    delete canvas.gl; // in case of fallback renderer\n    return;\n  }\n  vlc.pixelFormat = vlc.I420;\n  canvas.I420Program = gl.createProgram();\n  var program = canvas.I420Program;\n  var vertexShaderSource = [\"attribute highp vec4 aVertexPosition;\", \"attribute vec2 aTextureCoord;\", \"varying highp vec2 vTextureCoord;\", \"void main(void) {\", \" gl_Position = aVertexPosition;\", \" vTextureCoord = aTextureCoord;\", \"}\"].join(\"\\n\");\n  var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(vertexShader, vertexShaderSource);\n  gl.compileShader(vertexShader);\n  var fragmentShaderSource = [\"precision highp float;\", \"varying lowp vec2 vTextureCoord;\", \"uniform sampler2D YTexture;\", \"uniform sampler2D UTexture;\", \"uniform sampler2D VTexture;\", \"const mat4 YUV2RGB = mat4\", \"(\", \" 1.1643828125, 0, 1.59602734375, -.87078515625,\", \" 1.1643828125, -.39176171875, -.81296875, .52959375,\", \" 1.1643828125, 2.017234375, 0, -1.081390625,\", \" 0, 0, 0, 1\", \");\", \"void main(void) {\", \" gl_FragColor = vec4( texture2D(YTexture, vTextureCoord).x, texture2D(UTexture, vTextureCoord).x, texture2D(VTexture, vTextureCoord).x, 1) * YUV2RGB;\", \"}\"].join(\"\\n\");\n  var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(fragmentShader, fragmentShaderSource);\n  gl.compileShader(fragmentShader);\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(\"Shader link failed.\");\n  }\n  var vertexPositionAttribute = gl.getAttribLocation(program, \"aVertexPosition\");\n  gl.enableVertexAttribArray(vertexPositionAttribute);\n  var textureCoordAttribute = gl.getAttribLocation(program, \"aTextureCoord\");\n  gl.enableVertexAttribArray(textureCoordAttribute);\n  var verticesBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, verticesBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1.0, 1.0, 0.0, -1.0, 1.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, 0.0]), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n  var texCoordBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0]), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(textureCoordAttribute, 2, gl.FLOAT, false, 0, 0);\n  gl.y = new Texture(gl);\n  gl.u = new Texture(gl);\n  gl.v = new Texture(gl);\n  gl.y.bind(0, program, \"YTexture\");\n  gl.u.bind(1, program, \"UTexture\");\n  gl.v.bind(2, program, \"VTexture\");\n}\nfunction frameSetup(canvas, width, height, pixelFormat) {\n  var gl = canvas.gl;\n  canvas.width = width;\n  canvas.height = height;\n  if (!gl) {\n    canvas.img = canvas.ctx.createImageData(width, height);\n    return;\n  }\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n}\nexport function bind(canvas, vlc, options) {\n  if (!options) options = {};\n  var drawLoop, newFrame;\n  if (typeof canvas === 'string') canvas = window.document.querySelector(canvas);\n  setupCanvas(canvas, vlc, options);\n  vlc.onFrameSetup = function (width, height, pixelFormat) {\n    frameSetup(canvas, width, height, pixelFormat);\n    typeof options.onFrameSetup === \"function\" && options.onFrameSetup(width, height, pixelFormat);\n    var draw = function () {\n      drawLoop = window.requestAnimationFrame(function () {\n        var gl = canvas.gl;\n        if (gl && newFrame) gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        newFrame = false;\n        draw();\n      });\n    };\n    draw();\n    canvas.addEventListener(\"webglcontextlost\", function (event) {\n      event.preventDefault();\n      console.log(\"webgl context lost\");\n    }, false);\n    canvas.addEventListener(\"webglcontextrestored\", function (w, h, p) {\n      return function (event) {\n        setupCanvas(canvas, vlc, options);\n        frameSetup(canvas, w, h, p);\n        console.log(\"webgl context restored\");\n      };\n    }(width, height, pixelFormat), false);\n  };\n  var that = this;\n  vlc.onFrameReady = function (videoFrame) {\n    (canvas.gl ? render : renderFallback)(canvas, videoFrame, that.checkFps);\n    newFrame = true;\n    typeof options.onFrameReady === \"function\" && options.onFrameReady(videoFrame);\n  };\n  vlc.onFrameCleanup = function () {\n    if (drawLoop) {\n      window.cancelAnimationFrame(drawLoop);\n      drawLoop = null;\n    }\n    typeof options.onFrameCleanup === \"function\" && options.onFrameCleanup();\n  };\n}\nexport const checkFps = false;\nexport function getFps(cb) {\n  this.checkFps = true;\n  var that = this;\n  setTimeout(function () {\n    that.checkFps = false;\n    cb(fpsCount);\n    fpsCount = 0;\n  }, 1000);\n}\nexport function rendererClear(canvas) {\n  var gl = canvas.gl,\n    arr1 = new Uint8Array(1),\n    arr2 = new Uint8Array(1);\n  arr1[0] = 0;\n  arr2[0] = 128;\n  gl.y.fill(1, 1, arr1);\n  gl.u.fill(1, 1, arr2);\n  gl.v.fill(1, 1, arr2);\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}