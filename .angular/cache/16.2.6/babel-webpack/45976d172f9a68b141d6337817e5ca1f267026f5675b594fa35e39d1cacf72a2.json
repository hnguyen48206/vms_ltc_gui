{"ast":null,"code":"(function (name, definition) {\n  if (typeof define === 'function' && define.amd) {\n    // RequireJS / AMD\n    define(definition);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    // CommonJS / Node.js\n    module.exports = definition();\n  } else {\n    // Direct include\n    window.ysFixWebmDuration = definition();\n  }\n})('fix-webm-duration', function () {\n  /*\r\n   * This is the list of possible WEBM file sections by their IDs.\r\n   * Possible types: Container, Binary, Uint, Int, String, Float, Date\r\n   */\n  var sections = {\n    0xa45dfa3: {\n      name: 'EBML',\n      type: 'Container'\n    },\n    0x286: {\n      name: 'EBMLVersion',\n      type: 'Uint'\n    },\n    0x2f7: {\n      name: 'EBMLReadVersion',\n      type: 'Uint'\n    },\n    0x2f2: {\n      name: 'EBMLMaxIDLength',\n      type: 'Uint'\n    },\n    0x2f3: {\n      name: 'EBMLMaxSizeLength',\n      type: 'Uint'\n    },\n    0x282: {\n      name: 'DocType',\n      type: 'String'\n    },\n    0x287: {\n      name: 'DocTypeVersion',\n      type: 'Uint'\n    },\n    0x285: {\n      name: 'DocTypeReadVersion',\n      type: 'Uint'\n    },\n    0x6c: {\n      name: 'Void',\n      type: 'Binary'\n    },\n    0x3f: {\n      name: 'CRC-32',\n      type: 'Binary'\n    },\n    0xb538667: {\n      name: 'SignatureSlot',\n      type: 'Container'\n    },\n    0x3e8a: {\n      name: 'SignatureAlgo',\n      type: 'Uint'\n    },\n    0x3e9a: {\n      name: 'SignatureHash',\n      type: 'Uint'\n    },\n    0x3ea5: {\n      name: 'SignaturePublicKey',\n      type: 'Binary'\n    },\n    0x3eb5: {\n      name: 'Signature',\n      type: 'Binary'\n    },\n    0x3e5b: {\n      name: 'SignatureElements',\n      type: 'Container'\n    },\n    0x3e7b: {\n      name: 'SignatureElementList',\n      type: 'Container'\n    },\n    0x2532: {\n      name: 'SignedElement',\n      type: 'Binary'\n    },\n    0x8538067: {\n      name: 'Segment',\n      type: 'Container'\n    },\n    0x14d9b74: {\n      name: 'SeekHead',\n      type: 'Container'\n    },\n    0xdbb: {\n      name: 'Seek',\n      type: 'Container'\n    },\n    0x13ab: {\n      name: 'SeekID',\n      type: 'Binary'\n    },\n    0x13ac: {\n      name: 'SeekPosition',\n      type: 'Uint'\n    },\n    0x549a966: {\n      name: 'Info',\n      type: 'Container'\n    },\n    0x33a4: {\n      name: 'SegmentUID',\n      type: 'Binary'\n    },\n    0x3384: {\n      name: 'SegmentFilename',\n      type: 'String'\n    },\n    0x1cb923: {\n      name: 'PrevUID',\n      type: 'Binary'\n    },\n    0x1c83ab: {\n      name: 'PrevFilename',\n      type: 'String'\n    },\n    0x1eb923: {\n      name: 'NextUID',\n      type: 'Binary'\n    },\n    0x1e83bb: {\n      name: 'NextFilename',\n      type: 'String'\n    },\n    0x444: {\n      name: 'SegmentFamily',\n      type: 'Binary'\n    },\n    0x2924: {\n      name: 'ChapterTranslate',\n      type: 'Container'\n    },\n    0x29fc: {\n      name: 'ChapterTranslateEditionUID',\n      type: 'Uint'\n    },\n    0x29bf: {\n      name: 'ChapterTranslateCodec',\n      type: 'Uint'\n    },\n    0x29a5: {\n      name: 'ChapterTranslateID',\n      type: 'Binary'\n    },\n    0xad7b1: {\n      name: 'TimecodeScale',\n      type: 'Uint'\n    },\n    0x489: {\n      name: 'Duration',\n      type: 'Float'\n    },\n    0x461: {\n      name: 'DateUTC',\n      type: 'Date'\n    },\n    0x3ba9: {\n      name: 'Title',\n      type: 'String'\n    },\n    0xd80: {\n      name: 'MuxingApp',\n      type: 'String'\n    },\n    0x1741: {\n      name: 'WritingApp',\n      type: 'String'\n    },\n    // 0xf43b675: { name: 'Cluster', type: 'Container' },\n    0x67: {\n      name: 'Timecode',\n      type: 'Uint'\n    },\n    0x1854: {\n      name: 'SilentTracks',\n      type: 'Container'\n    },\n    0x18d7: {\n      name: 'SilentTrackNumber',\n      type: 'Uint'\n    },\n    0x27: {\n      name: 'Position',\n      type: 'Uint'\n    },\n    0x2b: {\n      name: 'PrevSize',\n      type: 'Uint'\n    },\n    0x23: {\n      name: 'SimpleBlock',\n      type: 'Binary'\n    },\n    0x20: {\n      name: 'BlockGroup',\n      type: 'Container'\n    },\n    0x21: {\n      name: 'Block',\n      type: 'Binary'\n    },\n    0x22: {\n      name: 'BlockVirtual',\n      type: 'Binary'\n    },\n    0x35a1: {\n      name: 'BlockAdditions',\n      type: 'Container'\n    },\n    0x26: {\n      name: 'BlockMore',\n      type: 'Container'\n    },\n    0x6e: {\n      name: 'BlockAddID',\n      type: 'Uint'\n    },\n    0x25: {\n      name: 'BlockAdditional',\n      type: 'Binary'\n    },\n    0x1b: {\n      name: 'BlockDuration',\n      type: 'Uint'\n    },\n    0x7a: {\n      name: 'ReferencePriority',\n      type: 'Uint'\n    },\n    0x7b: {\n      name: 'ReferenceBlock',\n      type: 'Int'\n    },\n    0x7d: {\n      name: 'ReferenceVirtual',\n      type: 'Int'\n    },\n    0x24: {\n      name: 'CodecState',\n      type: 'Binary'\n    },\n    0x35a2: {\n      name: 'DiscardPadding',\n      type: 'Int'\n    },\n    0xe: {\n      name: 'Slices',\n      type: 'Container'\n    },\n    0x68: {\n      name: 'TimeSlice',\n      type: 'Container'\n    },\n    0x4c: {\n      name: 'LaceNumber',\n      type: 'Uint'\n    },\n    0x4d: {\n      name: 'FrameNumber',\n      type: 'Uint'\n    },\n    0x4b: {\n      name: 'BlockAdditionID',\n      type: 'Uint'\n    },\n    0x4e: {\n      name: 'Delay',\n      type: 'Uint'\n    },\n    0x4f: {\n      name: 'SliceDuration',\n      type: 'Uint'\n    },\n    0x48: {\n      name: 'ReferenceFrame',\n      type: 'Container'\n    },\n    0x49: {\n      name: 'ReferenceOffset',\n      type: 'Uint'\n    },\n    0x4a: {\n      name: 'ReferenceTimeCode',\n      type: 'Uint'\n    },\n    0x2f: {\n      name: 'EncryptedBlock',\n      type: 'Binary'\n    },\n    0x654ae6b: {\n      name: 'Tracks',\n      type: 'Container'\n    },\n    0x2e: {\n      name: 'TrackEntry',\n      type: 'Container'\n    },\n    0x57: {\n      name: 'TrackNumber',\n      type: 'Uint'\n    },\n    0x33c5: {\n      name: 'TrackUID',\n      type: 'Uint'\n    },\n    0x3: {\n      name: 'TrackType',\n      type: 'Uint'\n    },\n    0x39: {\n      name: 'FlagEnabled',\n      type: 'Uint'\n    },\n    0x8: {\n      name: 'FlagDefault',\n      type: 'Uint'\n    },\n    0x15aa: {\n      name: 'FlagForced',\n      type: 'Uint'\n    },\n    0x1c: {\n      name: 'FlagLacing',\n      type: 'Uint'\n    },\n    0x2de7: {\n      name: 'MinCache',\n      type: 'Uint'\n    },\n    0x2df8: {\n      name: 'MaxCache',\n      type: 'Uint'\n    },\n    0x3e383: {\n      name: 'DefaultDuration',\n      type: 'Uint'\n    },\n    0x34e7a: {\n      name: 'DefaultDecodedFieldDuration',\n      type: 'Uint'\n    },\n    0x3314f: {\n      name: 'TrackTimecodeScale',\n      type: 'Float'\n    },\n    0x137f: {\n      name: 'TrackOffset',\n      type: 'Int'\n    },\n    0x15ee: {\n      name: 'MaxBlockAdditionID',\n      type: 'Uint'\n    },\n    0x136e: {\n      name: 'Name',\n      type: 'String'\n    },\n    0x2b59c: {\n      name: 'Language',\n      type: 'String'\n    },\n    0x6: {\n      name: 'CodecID',\n      type: 'String'\n    },\n    0x23a2: {\n      name: 'CodecPrivate',\n      type: 'Binary'\n    },\n    0x58688: {\n      name: 'CodecName',\n      type: 'String'\n    },\n    0x3446: {\n      name: 'AttachmentLink',\n      type: 'Uint'\n    },\n    0x1a9697: {\n      name: 'CodecSettings',\n      type: 'String'\n    },\n    0x1b4040: {\n      name: 'CodecInfoURL',\n      type: 'String'\n    },\n    0x6b240: {\n      name: 'CodecDownloadURL',\n      type: 'String'\n    },\n    0x2a: {\n      name: 'CodecDecodeAll',\n      type: 'Uint'\n    },\n    0x2fab: {\n      name: 'TrackOverlay',\n      type: 'Uint'\n    },\n    0x16aa: {\n      name: 'CodecDelay',\n      type: 'Uint'\n    },\n    0x16bb: {\n      name: 'SeekPreRoll',\n      type: 'Uint'\n    },\n    0x2624: {\n      name: 'TrackTranslate',\n      type: 'Container'\n    },\n    0x26fc: {\n      name: 'TrackTranslateEditionUID',\n      type: 'Uint'\n    },\n    0x26bf: {\n      name: 'TrackTranslateCodec',\n      type: 'Uint'\n    },\n    0x26a5: {\n      name: 'TrackTranslateTrackID',\n      type: 'Binary'\n    },\n    0x60: {\n      name: 'Video',\n      type: 'Container'\n    },\n    0x1a: {\n      name: 'FlagInterlaced',\n      type: 'Uint'\n    },\n    0x13b8: {\n      name: 'StereoMode',\n      type: 'Uint'\n    },\n    0x13c0: {\n      name: 'AlphaMode',\n      type: 'Uint'\n    },\n    0x13b9: {\n      name: 'OldStereoMode',\n      type: 'Uint'\n    },\n    0x30: {\n      name: 'PixelWidth',\n      type: 'Uint'\n    },\n    0x3a: {\n      name: 'PixelHeight',\n      type: 'Uint'\n    },\n    0x14aa: {\n      name: 'PixelCropBottom',\n      type: 'Uint'\n    },\n    0x14bb: {\n      name: 'PixelCropTop',\n      type: 'Uint'\n    },\n    0x14cc: {\n      name: 'PixelCropLeft',\n      type: 'Uint'\n    },\n    0x14dd: {\n      name: 'PixelCropRight',\n      type: 'Uint'\n    },\n    0x14b0: {\n      name: 'DisplayWidth',\n      type: 'Uint'\n    },\n    0x14ba: {\n      name: 'DisplayHeight',\n      type: 'Uint'\n    },\n    0x14b2: {\n      name: 'DisplayUnit',\n      type: 'Uint'\n    },\n    0x14b3: {\n      name: 'AspectRatioType',\n      type: 'Uint'\n    },\n    0xeb524: {\n      name: 'ColourSpace',\n      type: 'Binary'\n    },\n    0xfb523: {\n      name: 'GammaValue',\n      type: 'Float'\n    },\n    0x383e3: {\n      name: 'FrameRate',\n      type: 'Float'\n    },\n    0x61: {\n      name: 'Audio',\n      type: 'Container'\n    },\n    0x35: {\n      name: 'SamplingFrequency',\n      type: 'Float'\n    },\n    0x38b5: {\n      name: 'OutputSamplingFrequency',\n      type: 'Float'\n    },\n    0x1f: {\n      name: 'Channels',\n      type: 'Uint'\n    },\n    0x3d7b: {\n      name: 'ChannelPositions',\n      type: 'Binary'\n    },\n    0x2264: {\n      name: 'BitDepth',\n      type: 'Uint'\n    },\n    0x62: {\n      name: 'TrackOperation',\n      type: 'Container'\n    },\n    0x63: {\n      name: 'TrackCombinePlanes',\n      type: 'Container'\n    },\n    0x64: {\n      name: 'TrackPlane',\n      type: 'Container'\n    },\n    0x65: {\n      name: 'TrackPlaneUID',\n      type: 'Uint'\n    },\n    0x66: {\n      name: 'TrackPlaneType',\n      type: 'Uint'\n    },\n    0x69: {\n      name: 'TrackJoinBlocks',\n      type: 'Container'\n    },\n    0x6d: {\n      name: 'TrackJoinUID',\n      type: 'Uint'\n    },\n    0x40: {\n      name: 'TrickTrackUID',\n      type: 'Uint'\n    },\n    0x41: {\n      name: 'TrickTrackSegmentUID',\n      type: 'Binary'\n    },\n    0x46: {\n      name: 'TrickTrackFlag',\n      type: 'Uint'\n    },\n    0x47: {\n      name: 'TrickMasterTrackUID',\n      type: 'Uint'\n    },\n    0x44: {\n      name: 'TrickMasterTrackSegmentUID',\n      type: 'Binary'\n    },\n    0x2d80: {\n      name: 'ContentEncodings',\n      type: 'Container'\n    },\n    0x2240: {\n      name: 'ContentEncoding',\n      type: 'Container'\n    },\n    0x1031: {\n      name: 'ContentEncodingOrder',\n      type: 'Uint'\n    },\n    0x1032: {\n      name: 'ContentEncodingScope',\n      type: 'Uint'\n    },\n    0x1033: {\n      name: 'ContentEncodingType',\n      type: 'Uint'\n    },\n    0x1034: {\n      name: 'ContentCompression',\n      type: 'Container'\n    },\n    0x254: {\n      name: 'ContentCompAlgo',\n      type: 'Uint'\n    },\n    0x255: {\n      name: 'ContentCompSettings',\n      type: 'Binary'\n    },\n    0x1035: {\n      name: 'ContentEncryption',\n      type: 'Container'\n    },\n    0x7e1: {\n      name: 'ContentEncAlgo',\n      type: 'Uint'\n    },\n    0x7e2: {\n      name: 'ContentEncKeyID',\n      type: 'Binary'\n    },\n    0x7e3: {\n      name: 'ContentSignature',\n      type: 'Binary'\n    },\n    0x7e4: {\n      name: 'ContentSigKeyID',\n      type: 'Binary'\n    },\n    0x7e5: {\n      name: 'ContentSigAlgo',\n      type: 'Uint'\n    },\n    0x7e6: {\n      name: 'ContentSigHashAlgo',\n      type: 'Uint'\n    },\n    0xc53bb6b: {\n      name: 'Cues',\n      type: 'Container'\n    },\n    0x3b: {\n      name: 'CuePoint',\n      type: 'Container'\n    },\n    0x33: {\n      name: 'CueTime',\n      type: 'Uint'\n    },\n    0x37: {\n      name: 'CueTrackPositions',\n      type: 'Container'\n    },\n    0x77: {\n      name: 'CueTrack',\n      type: 'Uint'\n    },\n    0x71: {\n      name: 'CueClusterPosition',\n      type: 'Uint'\n    },\n    0x70: {\n      name: 'CueRelativePosition',\n      type: 'Uint'\n    },\n    0x32: {\n      name: 'CueDuration',\n      type: 'Uint'\n    },\n    0x1378: {\n      name: 'CueBlockNumber',\n      type: 'Uint'\n    },\n    0x6a: {\n      name: 'CueCodecState',\n      type: 'Uint'\n    },\n    0x5b: {\n      name: 'CueReference',\n      type: 'Container'\n    },\n    0x16: {\n      name: 'CueRefTime',\n      type: 'Uint'\n    },\n    0x17: {\n      name: 'CueRefCluster',\n      type: 'Uint'\n    },\n    0x135f: {\n      name: 'CueRefNumber',\n      type: 'Uint'\n    },\n    0x6b: {\n      name: 'CueRefCodecState',\n      type: 'Uint'\n    },\n    0x941a469: {\n      name: 'Attachments',\n      type: 'Container'\n    },\n    0x21a7: {\n      name: 'AttachedFile',\n      type: 'Container'\n    },\n    0x67e: {\n      name: 'FileDescription',\n      type: 'String'\n    },\n    0x66e: {\n      name: 'FileName',\n      type: 'String'\n    },\n    0x660: {\n      name: 'FileMimeType',\n      type: 'String'\n    },\n    0x65c: {\n      name: 'FileData',\n      type: 'Binary'\n    },\n    0x6ae: {\n      name: 'FileUID',\n      type: 'Uint'\n    },\n    0x675: {\n      name: 'FileReferral',\n      type: 'Binary'\n    },\n    0x661: {\n      name: 'FileUsedStartTime',\n      type: 'Uint'\n    },\n    0x662: {\n      name: 'FileUsedEndTime',\n      type: 'Uint'\n    },\n    0x43a770: {\n      name: 'Chapters',\n      type: 'Container'\n    },\n    0x5b9: {\n      name: 'EditionEntry',\n      type: 'Container'\n    },\n    0x5bc: {\n      name: 'EditionUID',\n      type: 'Uint'\n    },\n    0x5bd: {\n      name: 'EditionFlagHidden',\n      type: 'Uint'\n    },\n    0x5db: {\n      name: 'EditionFlagDefault',\n      type: 'Uint'\n    },\n    0x5dd: {\n      name: 'EditionFlagOrdered',\n      type: 'Uint'\n    },\n    0x36: {\n      name: 'ChapterAtom',\n      type: 'Container'\n    },\n    0x33c4: {\n      name: 'ChapterUID',\n      type: 'Uint'\n    },\n    0x1654: {\n      name: 'ChapterStringUID',\n      type: 'String'\n    },\n    0x11: {\n      name: 'ChapterTimeStart',\n      type: 'Uint'\n    },\n    0x12: {\n      name: 'ChapterTimeEnd',\n      type: 'Uint'\n    },\n    0x18: {\n      name: 'ChapterFlagHidden',\n      type: 'Uint'\n    },\n    0x598: {\n      name: 'ChapterFlagEnabled',\n      type: 'Uint'\n    },\n    0x2e67: {\n      name: 'ChapterSegmentUID',\n      type: 'Binary'\n    },\n    0x2ebc: {\n      name: 'ChapterSegmentEditionUID',\n      type: 'Uint'\n    },\n    0x23c3: {\n      name: 'ChapterPhysicalEquiv',\n      type: 'Uint'\n    },\n    0xf: {\n      name: 'ChapterTrack',\n      type: 'Container'\n    },\n    0x9: {\n      name: 'ChapterTrackNumber',\n      type: 'Uint'\n    },\n    0x0: {\n      name: 'ChapterDisplay',\n      type: 'Container'\n    },\n    0x5: {\n      name: 'ChapString',\n      type: 'String'\n    },\n    0x37c: {\n      name: 'ChapLanguage',\n      type: 'String'\n    },\n    0x37e: {\n      name: 'ChapCountry',\n      type: 'String'\n    },\n    0x2944: {\n      name: 'ChapProcess',\n      type: 'Container'\n    },\n    0x2955: {\n      name: 'ChapProcessCodecID',\n      type: 'Uint'\n    },\n    0x50d: {\n      name: 'ChapProcessPrivate',\n      type: 'Binary'\n    },\n    0x2911: {\n      name: 'ChapProcessCommand',\n      type: 'Container'\n    },\n    0x2922: {\n      name: 'ChapProcessTime',\n      type: 'Uint'\n    },\n    0x2933: {\n      name: 'ChapProcessData',\n      type: 'Binary'\n    },\n    0x254c367: {\n      name: 'Tags',\n      type: 'Container'\n    },\n    0x3373: {\n      name: 'Tag',\n      type: 'Container'\n    },\n    0x23c0: {\n      name: 'Targets',\n      type: 'Container'\n    },\n    0x28ca: {\n      name: 'TargetTypeValue',\n      type: 'Uint'\n    },\n    0x23ca: {\n      name: 'TargetType',\n      type: 'String'\n    },\n    0x23c5: {\n      name: 'TagTrackUID',\n      type: 'Uint'\n    },\n    0x23c9: {\n      name: 'TagEditionUID',\n      type: 'Uint'\n    },\n    0x23c4: {\n      name: 'TagChapterUID',\n      type: 'Uint'\n    },\n    0x23c6: {\n      name: 'TagAttachmentUID',\n      type: 'Uint'\n    },\n    0x27c8: {\n      name: 'SimpleTag',\n      type: 'Container'\n    },\n    0x5a3: {\n      name: 'TagName',\n      type: 'String'\n    },\n    0x47a: {\n      name: 'TagLanguage',\n      type: 'String'\n    },\n    0x484: {\n      name: 'TagDefault',\n      type: 'Uint'\n    },\n    0x487: {\n      name: 'TagString',\n      type: 'String'\n    },\n    0x485: {\n      name: 'TagBinary',\n      type: 'Binary'\n    }\n  };\n  function doInherit(newClass, baseClass) {\n    newClass.prototype = Object.create(baseClass.prototype);\n    newClass.prototype.constructor = newClass;\n  }\n  function WebmBase(name, type) {\n    this.name = name || 'Unknown';\n    this.type = type || 'Unknown';\n  }\n  WebmBase.prototype.updateBySource = function () {};\n  WebmBase.prototype.setSource = function (source) {\n    this.source = source;\n    this.updateBySource();\n  };\n  WebmBase.prototype.updateByData = function () {};\n  WebmBase.prototype.setData = function (data) {\n    this.data = data;\n    this.updateByData();\n  };\n  function WebmUint(name, type) {\n    WebmBase.call(this, name, type || 'Uint');\n  }\n  doInherit(WebmUint, WebmBase);\n  function padHex(hex) {\n    return hex.length % 2 === 1 ? '0' + hex : hex;\n  }\n  WebmUint.prototype.updateBySource = function () {\n    // use hex representation of a number instead of number value\n    this.data = '';\n    for (var i = 0; i < this.source.length; i++) {\n      var hex = this.source[i].toString(16);\n      this.data += padHex(hex);\n    }\n  };\n  WebmUint.prototype.updateByData = function () {\n    var length = this.data.length / 2;\n    this.source = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n      var hex = this.data.substr(i * 2, 2);\n      this.source[i] = parseInt(hex, 16);\n    }\n  };\n  WebmUint.prototype.getValue = function () {\n    return parseInt(this.data, 16);\n  };\n  WebmUint.prototype.setValue = function (value) {\n    this.setData(padHex(value.toString(16)));\n  };\n  function WebmFloat(name, type) {\n    WebmBase.call(this, name, type || 'Float');\n  }\n  doInherit(WebmFloat, WebmBase);\n  WebmFloat.prototype.getFloatArrayType = function () {\n    return this.source && this.source.length === 4 ? Float32Array : Float64Array;\n  };\n  WebmFloat.prototype.updateBySource = function () {\n    var byteArray = this.source.reverse();\n    var floatArrayType = this.getFloatArrayType();\n    var floatArray = new floatArrayType(byteArray.buffer);\n    this.data = floatArray[0];\n  };\n  WebmFloat.prototype.updateByData = function () {\n    var floatArrayType = this.getFloatArrayType();\n    var floatArray = new floatArrayType([this.data]);\n    var byteArray = new Uint8Array(floatArray.buffer);\n    this.source = byteArray.reverse();\n  };\n  WebmFloat.prototype.getValue = function () {\n    return this.data;\n  };\n  WebmFloat.prototype.setValue = function (value) {\n    this.setData(value);\n  };\n  function WebmContainer(name, type) {\n    WebmBase.call(this, name, type || 'Container');\n  }\n  doInherit(WebmContainer, WebmBase);\n  WebmContainer.prototype.readByte = function () {\n    return this.source[this.offset++];\n  };\n  WebmContainer.prototype.readUint = function () {\n    var firstByte = this.readByte();\n    var bytes = 8 - firstByte.toString(2).length;\n    var value = firstByte - (1 << 7 - bytes);\n    for (var i = 0; i < bytes; i++) {\n      // don't use bit operators to support x86\n      value *= 256;\n      value += this.readByte();\n    }\n    return value;\n  };\n  WebmContainer.prototype.updateBySource = function () {\n    this.data = [];\n    for (this.offset = 0; this.offset < this.source.length; this.offset = end) {\n      var id = this.readUint();\n      var len = this.readUint();\n      var end = Math.min(this.offset + len, this.source.length);\n      var data = this.source.slice(this.offset, end);\n      var info = sections[id] || {\n        name: 'Unknown',\n        type: 'Unknown'\n      };\n      var ctr = WebmBase;\n      switch (info.type) {\n        case 'Container':\n          ctr = WebmContainer;\n          break;\n        case 'Uint':\n          ctr = WebmUint;\n          break;\n        case 'Float':\n          ctr = WebmFloat;\n          break;\n      }\n      var section = new ctr(info.name, info.type);\n      section.setSource(data);\n      this.data.push({\n        id: id,\n        idHex: id.toString(16),\n        data: section\n      });\n    }\n  };\n  WebmContainer.prototype.writeUint = function (x, draft) {\n    for (var bytes = 1, flag = 0x80; x >= flag && bytes < 8; bytes++, flag *= 0x80) {}\n    if (!draft) {\n      var value = flag + x;\n      for (var i = bytes - 1; i >= 0; i--) {\n        // don't use bit operators to support x86\n        var c = value % 256;\n        this.source[this.offset + i] = c;\n        value = (value - c) / 256;\n      }\n    }\n    this.offset += bytes;\n  };\n  WebmContainer.prototype.writeSections = function (draft) {\n    this.offset = 0;\n    for (var i = 0; i < this.data.length; i++) {\n      var section = this.data[i],\n        content = section.data.source,\n        contentLength = content.length;\n      this.writeUint(section.id, draft);\n      this.writeUint(contentLength, draft);\n      if (!draft) {\n        this.source.set(content, this.offset);\n      }\n      this.offset += contentLength;\n    }\n    return this.offset;\n  };\n  WebmContainer.prototype.updateByData = function () {\n    // run without accessing this.source to determine total length - need to know it to create Uint8Array\n    var length = this.writeSections('draft');\n    this.source = new Uint8Array(length);\n    // now really write data\n    this.writeSections();\n  };\n  WebmContainer.prototype.getSectionById = function (id) {\n    for (var i = 0; i < this.data.length; i++) {\n      var section = this.data[i];\n      if (section.id === id) {\n        return section.data;\n      }\n    }\n    return null;\n  };\n  function WebmFile(source) {\n    WebmContainer.call(this, 'File', 'File');\n    this.setSource(source);\n  }\n  doInherit(WebmFile, WebmContainer);\n  WebmFile.prototype.fixDuration = function (duration, options) {\n    var logger = options && options.logger;\n    if (logger === undefined) {\n      logger = function (message) {\n        console.log(message);\n      };\n    } else if (!logger) {\n      logger = function () {};\n    }\n    var segmentSection = this.getSectionById(0x8538067);\n    if (!segmentSection) {\n      logger('[fix-webm-duration] Segment section is missing');\n      return false;\n    }\n    var infoSection = segmentSection.getSectionById(0x549a966);\n    if (!infoSection) {\n      logger('[fix-webm-duration] Info section is missing');\n      return false;\n    }\n    var timeScaleSection = infoSection.getSectionById(0xad7b1);\n    if (!timeScaleSection) {\n      logger('[fix-webm-duration] TimecodeScale section is missing');\n      return false;\n    }\n    var durationSection = infoSection.getSectionById(0x489);\n    if (durationSection) {\n      if (durationSection.getValue() <= 0) {\n        logger('[fix-webm-duration] Duration section is present, but the value is empty');\n        durationSection.setValue(duration);\n      } else {\n        logger('[fix-webm-duration] Duration section is present');\n        return false;\n      }\n    } else {\n      logger('[fix-webm-duration] Duration section is missing');\n      // append Duration section\n      durationSection = new WebmFloat('Duration', 'Float');\n      durationSection.setValue(duration);\n      infoSection.data.push({\n        id: 0x489,\n        data: durationSection\n      });\n    }\n\n    // set default time scale to 1 millisecond (1000000 nanoseconds)\n    timeScaleSection.setValue(1000000);\n    infoSection.updateByData();\n    segmentSection.updateByData();\n    this.updateByData();\n    return true;\n  };\n  WebmFile.prototype.toBlob = function (mimeType) {\n    return new Blob([this.source.buffer], {\n      type: mimeType || 'video/webm'\n    });\n  };\n  function fixWebmDuration(blob, duration, callback, options) {\n    // The callback may be omitted - then the third argument is options\n    if (typeof callback === \"object\") {\n      options = callback;\n      callback = undefined;\n    }\n    if (!callback) {\n      return new Promise(function (resolve) {\n        fixWebmDuration(blob, duration, resolve, options);\n      });\n    }\n    try {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        try {\n          var file = new WebmFile(new Uint8Array(reader.result));\n          if (file.fixDuration(duration, options)) {\n            blob = file.toBlob(blob.type);\n          }\n        } catch (ex) {\n          // ignore\n        }\n        callback(blob);\n      };\n      reader.readAsArrayBuffer(blob);\n    } catch (ex) {\n      callback(blob);\n    }\n  }\n\n  // Support AMD import default\n  fixWebmDuration.default = fixWebmDuration;\n  return fixWebmDuration;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}