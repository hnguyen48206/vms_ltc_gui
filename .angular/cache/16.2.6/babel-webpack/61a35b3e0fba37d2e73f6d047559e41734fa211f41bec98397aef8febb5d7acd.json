{"ast":null,"code":"function t(t, e, o = !0) {\n  const n = new ResizeObserver(() => {\n    o ? window.requestAnimationFrame(() => e()) : e();\n  });\n  return n.observe(t), n.__testTrigger = e, n;\n}\nfunction e(t, e) {\n  const o = new IntersectionObserver(t => {\n    !0 === t[0].isIntersecting && e();\n  }, {\n    threshold: [0]\n  });\n  return o.observe(t), o;\n}\nfunction o(t, e) {\n  return t.updateComplete.then(() => {\n    const o = t.layout;\n    return t.layout = e.layouts[0], e.layouts.reduce((o, n) => o.then(() => {\n      if (t.layout === e.initialLayout) return n;\n      {\n        const e = t.layout;\n        return t.layout = n, t.updateComplete.then(() => (t.layout = t.layoutStable ? t.layout : e, n));\n      }\n    }), Promise.resolve(e.layouts[0])).then(() => o !== t.layout);\n  });\n}\nexport { o as calculateOptimalLayout, t as elementResize, e as elementVisible };\n//# sourceMappingURL=responsive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}