{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HoangN/Desktop/NW/LTC_GUI/base_ltc_clarity/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nfunction t() {\n  return t => t.addInitializer(t => new e(t));\n}\nclass e {\n  constructor(t) {\n    this.host = t, this.selectionActive = !1, t.addController(this);\n  }\n  get enabled() {\n    return !1 !== this.host.rangeSelection && !Array.from(this.host.rows).find(t => t.draggable);\n  }\n  hostConnected() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.host.updateComplete, _this.setupKeyboardListeners(), _this.setupMouseEvents();\n    })();\n  }\n  setupMouseEvents() {\n    const t = this.host.grid.shadowRoot ? this.host.grid.shadowRoot : this.host.grid;\n    t.addEventListener(\"mousedown\", t => {\n      this.enabled && 1 === t.buttons && !t.ctrlKey && this.setFirstCell(t);\n    }), t.addEventListener(\"mouseover\", t => {\n      this.enabled && this.setActiveCell(t.composedPath().find(t => Array.from(this.host.cells).includes(t)));\n    }), t.addEventListener(\"mouseup\", () => {\n      this.enabled && this.stopSelection();\n    });\n  }\n  setupKeyboardListeners() {\n    this.host.addEventListener(\"cdsKeyChange\", t => {\n      this.enabled && t.detail.code && (this.setActiveCell(t.detail.activeItem), t.detail.shiftKey || (this.stopSelection(), this.resetAllActiveCells(), this.host.dispatchEvent(new CustomEvent(\"rangeSelectionChange\", {\n        detail: []\n      }))));\n    }), this.host.addEventListener(\"keydown\", t => {\n      this.enabled && \"ShiftLeft\" === t.code && t.shiftKey && !this.selectionActive && this.setFirstCell(t);\n    });\n  }\n  setFirstCell(t) {\n    const e = t.composedPath().find(t => Array.from(this.host.cells).includes(t));\n    e && (this.firstCell = e, this.selectionActive = !0, this.resetAllActiveCells());\n  }\n  setActiveCell(t) {\n    t && this.selectionActive && (this.activeCell = t, this.calculateSelection());\n  }\n  stopSelection() {\n    this.selectionActive = !1;\n  }\n  resetAllActiveCells() {\n    this.host.cells.forEach(t => t.removeAttribute(\"highlight\"));\n  }\n  calculateSelection() {\n    var _this$firstCell$paren, _this$activeCell$pare;\n    const t = parseInt(this.firstCell.ariaColIndex),\n      e = parseInt(this.activeCell.ariaColIndex),\n      s = parseInt((_this$firstCell$paren = this.firstCell.parentElement) === null || _this$firstCell$paren === void 0 ? void 0 : _this$firstCell$paren.ariaRowIndex),\n      i = parseInt((_this$activeCell$pare = this.activeCell.parentElement) === null || _this$activeCell$pare === void 0 ? void 0 : _this$activeCell$pare.ariaRowIndex);\n    this.resetAllActiveCells(), this.host.cells.forEach(l => {\n      var _l$parentElement;\n      const h = parseInt(l.ariaColIndex),\n        n = parseInt((_l$parentElement = l.parentElement) === null || _l$parentElement === void 0 ? void 0 : _l$parentElement.ariaRowIndex);\n      (t <= e && h >= t && h <= e || t >= e && h <= t && h >= e) && (s <= i && n >= s && n <= i || s >= i && n <= s && n >= i) && l.setAttribute(\"highlight\", \"\");\n    }), this.host.dispatchEvent(new CustomEvent(\"rangeSelectionChange\", {\n      detail: Array.from(this.host.cells).filter(t => t.hasAttribute(\"highlight\"))\n    }));\n  }\n}\nexport { e as GridRangeSelectionController, t as gridRangeSelection };\n//# sourceMappingURL=grid-range-selection.controller.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}