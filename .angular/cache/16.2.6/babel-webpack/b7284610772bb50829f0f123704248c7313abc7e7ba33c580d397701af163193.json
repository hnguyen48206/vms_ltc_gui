{"ast":null,"code":"/// <reference types=\"@types/dom-mediacapture-record\" />\n/// <reference types=\"@types/dom-mediacapture-record\" />\nimport { ElementRef, NgZone } from '@angular/core';\nimport { setupCanvas } from '../../../assets/web-gl-render.js';\nimport { bind, rendererClear } from '../../../assets/wcjs-render.js';\nimport * as moment from 'moment';\nimport fixWebmDuration from \"fix-webm-duration\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction IvmsplayerComponent_h2_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.config.videoID + \"-player-status-txt\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.statusTxt);\n  }\n}\nfunction IvmsplayerComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵelement(2, \"span\")(3, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function IvmsplayerComponent_ng_container_6_Template_div_click_4_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.setProgress($event));\n    });\n    i0.ɵɵelement(5, \"div\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1.config.videoID + \"-time\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1.config.videoID + \"-time-current\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1.config.videoID + \"-time-total\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1.config.videoID + \"-progress\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1.config.videoID + \"-progress-filled\");\n  }\n}\nfunction IvmsplayerComponent_div_14_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵlistener(\"click\", function IvmsplayerComponent_div_14_li_6_Template_li_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.setSpeed($event, 1));\n    });\n    i0.ɵɵtext(1, \"1x\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r5.cssStringVar)(\"id\", ctx_r5.config.videoID + \"-speed-item-1\");\n  }\n}\nfunction IvmsplayerComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"ul\")(2, \"li\", 9);\n    i0.ɵɵlistener(\"click\", function IvmsplayerComponent_div_14_Template_li_click_2_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.setSpeed($event, 0.5));\n    });\n    i0.ɵɵtext(3, \"0.5x\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"li\", 9);\n    i0.ɵɵlistener(\"click\", function IvmsplayerComponent_div_14_Template_li_click_4_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.setSpeed($event, 0.75));\n    });\n    i0.ɵɵtext(5, \"0.75x\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, IvmsplayerComponent_div_14_li_6_Template, 2, 2, \"li\", 10);\n    i0.ɵɵelementStart(7, \"li\", 9);\n    i0.ɵɵlistener(\"click\", function IvmsplayerComponent_div_14_Template_li_click_7_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.setSpeed($event, 1.5));\n    });\n    i0.ɵɵtext(8, \"1.5x\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"li\", 9);\n    i0.ɵɵlistener(\"click\", function IvmsplayerComponent_div_14_Template_li_click_9_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.setSpeed($event, 2));\n    });\n    i0.ɵɵtext(10, \"2x\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.config.videoID + \"-speed\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r2.config.videoID + \"-speed-list\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r2.config.videoID + \"-speed-item\");\n    i0.ɵɵproperty(\"id\", ctx_r2.config.videoID + \"-speed-item-0.5\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMap(ctx_r2.config.videoID + \"-speed-item\");\n    i0.ɵɵproperty(\"id\", ctx_r2.config.videoID + \"-speed-item-0.75\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.cssStringVar != null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r2.config.videoID + \"-speed-item\");\n    i0.ɵɵproperty(\"id\", ctx_r2.config.videoID + \"-speed-item-1.5\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMap(ctx_r2.config.videoID + \"-speed-item\");\n    i0.ɵɵproperty(\"id\", ctx_r2.config.videoID + \"-speed-item-2\");\n  }\n}\nexport let IvmsplayerComponent = /*#__PURE__*/(() => {\n  var _class;\n  class IvmsplayerComponent {\n    constructor(el, zone) {\n      this.el = el;\n      this.zone = zone;\n      this.rendererOption = {\n        fallbackRenderer: true\n      };\n      this.fullscreen = false;\n      this.statusTxt = '';\n      //STATUS CONTROLLERS\n      this.initSetup = false;\n      this.fpsCounter = 0;\n      this.currentTime = 0;\n      this.cssStringVar = null;\n      this.isRecording = false;\n      this.frameRecevingTime = null;\n      this.frameCheckTimeout = null;\n      this.currentFrame = null;\n      this.previousFrame = null;\n      this.currentSnapshot = null;\n      this.playerStopIntentionally = false;\n      this.windowHasFocus = true;\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      let self = this;\n      document.addEventListener(\"visibilitychange\", function () {\n        if (document.visibilityState === 'visible') {\n          console.log('has focus');\n          self.windowHasFocus = true;\n        } else {\n          console.log('lost focus');\n          self.windowHasFocus = false;\n        }\n      });\n      let style = `\n    .${this.config.videoID}-speed-list {\n      list-style: none;\n      margin: 0;\n      padding: 0;\n      display: flex;\n      margin-right: 20px;\n      text-align: center;\n      color: whitesmoke;\n    }\n    .${this.config.videoID}-speed-list li {\n      color: whitesmoke;\n      padding: 5px;\n      cursor: pointer;\n    }\n    .${this.config.videoID}-speed-list li:hover,\n    .${this.config.videoID}-speed-list li.${this.config.videoID}-active {\n      color: whitesmoke;\n      font-weight: bold;\n    }\n    .${this.config.videoID}-time {\n      position: absolute;\n      right: 30px;\n      bottom: 100%;\n      padding-bottom: 14px;\n      color: whitesmoke;\n    }\n    .${this.config.videoID}-progress {\n      height: 8px;\n      width: calc(100% - 40px);\n      background: rgba(60, 60, 60, 0.6);\n      margin: auto;\n      border-radius: 6px;\n      position: absolute;\n      left: 20px;\n      bottom: 100%;\n      transition: height 0.1s ease-in-out;\n      cursor: pointer;\n    }\n    .${this.config.videoID}-progress:hover {\n      height: 10px;\n    }\n    .${this.config.videoID}-progress-filled {\n      background-color: #a8dab5;\n      width: 0%;\n      height: 100%;\n      border-radius: 6px;\n      transition: all 0.1s; \n    }\n    .${this.config.videoID}-player-container {\n      padding: 0px;\n      width: 50vw;\n      min-width: 100px;\n      margin: auto;\n    }\n    .${this.config.videoID}-player {\n      width: 100%;\n      height: 0;\n      padding-bottom: 56.25%;\n      box-shadow: 0px 10px 0px -3px rgba(0, 0, 0, 0.2);\n      position: relative;\n      overflow: hidden;\n      background: #000000;\n    }\n    .${this.config.videoID}-player-status-txt{\n      position: absolute;\n      top: 5px;\n      left: 20px;\n      color: whitesmoke;\n      font-weight:bold;\n    }\n    .${this.config.videoID}-player:fullscreen {\n      padding-bottom: 100vh;\n    }\n    .${this.config.videoID}-player:-webkit-full-screen {\n      padding-bottom: 100vh;\n    }\n    .${this.config.videoID}-player:-moz-full-screen {\n      padding-bottom: 100vh;\n    }\n    .${this.config.videoID}-player:-ms-fullscreen  {\n      padding-bottom: 100vh;\n    }\n    \n    .${this.config.videoID}-controls {\n      padding: 0;\n      position: absolute;\n      bottom: -80px;\n      width: 100%;\n      height: 48px;\n      box-sizing: border-box;\n      background: linear-gradient(\n        180deg,\n        rgba(37, 37, 37, 0) 10%,\n        rgba(37, 37, 37, 0.6) 80%\n      );\n      transition: all 0.2s ease-in 5s;\n    }\n    .${this.config.videoID}-player:hover .${this.config.videoID}-controls {\n      bottom: 0;\n      transition: all 0.2s ease-out;\n    }\n    \n    .${this.config.videoID}-controls-main {\n      width: calc(100% - 40px);\n      margin: auto;\n      height: 100%;\n      display: flex;\n      justify-content: space-between;\n    }\n    .${this.config.videoID}-controls-left,\n    .${this.config.videoID}-controls-right {\n      flex: 1;\n      display: flex;\n      align-items: center;\n      overflow: hidden;\n    }\n    .${this.config.videoID}-controls-left {\n      margin-left: 10px;\n    }\n    .${this.config.videoID}-controls-right {\n      margin-right: 10px;\n      justify-content: flex-end;\n    }\n    .${this.config.videoID}-snapshot-btn\n    {\n      width: 30px;\n      height: 30px;  \n      cursor: pointer; \n      margin-left: 15px;  \n    }\n    .${this.config.videoID}-snapshot-btn-shake {\n      animation: ${this.config.videoID}-snapshot-btn-shake-animation 1s infinite;\n      -webkit-animation: ${this.config.videoID}-snapshot-btn-shake-animation 1s infinite;\n    }\n    @keyframes ${this.config.videoID}-snapshot-btn-shake-animation {\n      0% { transform: translate(1px, 1px) rotate(0deg); }\n      10% { transform: translate(-1px, -2px) rotate(-1deg); }\n      20% { transform: translate(-3px, 0px) rotate(1deg); }\n      30% { transform: translate(3px, 2px) rotate(0deg); }\n      40% { transform: translate(1px, -1px) rotate(1deg); }\n      50% { transform: translate(-1px, 2px) rotate(-1deg); }\n      60% { transform: translate(-3px, 1px) rotate(0deg); }\n      70% { transform: translate(3px, 1px) rotate(-1deg); }\n      80% { transform: translate(-1px, -1px) rotate(1deg); }\n      90% { transform: translate(1px, 2px) rotate(0deg); }\n      100% { transform: translate(1px, -2px) rotate(-1deg); }\n    }\n    .${this.config.videoID}-reset-btn\n    {\n      width: 30px;\n      height: 30px;  \n      cursor: pointer; \n      margin-left: 15px;  \n    }\n    .${this.config.videoID}-reset-btn-rotation {\n      animation: ${this.config.videoID}-reset-btn-rotation-animation 2s infinite linear;\n      -webkit-animation: ${this.config.videoID}-reset-btn-rotation-animation 2s infinite linear;\n    }\n    @keyframes ${this.config.videoID}-reset-btn-rotation-animation {\n      from {\n        transform: rotate(0deg);\n      }\n      to {\n        transform: rotate(359deg);\n      }\n    }\n    .${this.config.videoID}-record-btn\n    {\n      width: 30px;\n      height: 30px;  \n      cursor: pointer;\n    }\n    .${this.config.videoID}-record-btn-blink {\n      animation: ${this.config.videoID}-record-btn-blink-animation 1s steps(5, start) infinite;\n      -webkit-animation: ${this.config.videoID}-record-btn-blink-animation 1s steps(5, start) infinite;\n    }\n    @keyframes ${this.config.videoID}-record-btn-blink-animation {\n      to {\n        visibility: hidden;\n      }\n    }\n    @-webkit-keyframes ${this.config.videoID}-record-btn-blink-animation {\n      to {\n        visibility: hidden;\n      }\n    }\n    .${this.config.videoID}-play-btn {\n      width: 30px;\n      height: 30px;\n      position: relative;\n      margin: auto;\n      transform: rotate(-90deg) scale(0.8);\n      transition: -webkit-clip-path 0.3s ease-in 0.1s, shape-inside 0.3s ease-in 0.1s,\n        transform 0.8s cubic-bezier(0.85, -0.25, 0.25, 1.425);\n        cursor: pointer;\n    }\n    .${this.config.videoID}-play-btn.${this.config.videoID}-paused {\n      transform: rotate(0deg);\n    }\n    .${this.config.videoID}-play-btn:before,\n    .${this.config.videoID}-play-btn:after {\n      content: \"\";\n      position: absolute;\n      background: white;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      transition: inherit;\n    }\n    .${this.config.videoID}-play-btn:before {\n      -webkit-clip-path: polygon(0 10%, 100% 10%, 100% 40%, 0 40%);\n      shape-inside: polygon(0 10%, 100% 10%, 100% 40%, 0 40%);\n    }\n    .${this.config.videoID}-play-btn:after {\n      -webkit-clip-path: polygon(0 60%, 100% 60%, 100% 90%, 0 90%);\n      shape-inside: polygon(0 60%, 100% 60%, 100% 90%, 0 90%);\n    }\n    .${this.config.videoID}-play-btn.${this.config.videoID}-paused:before {\n      -webkit-clip-path: polygon(10% 0, 90% 51%, 90% 51%, 10% 51%);\n      shape-inside: polygon(0 0, 100% 51%, 100% 51%, 0 51%);\n    }\n    .${this.config.videoID}-play-btn.${this.config.videoID}-paused:after {\n      -webkit-clip-path: polygon(10% 49.5%, 80% 49.5%, 90% 49.5%, 10% 100%);\n      shape-inside: polygon(10% 49.5%, 80% 49.5%, 90% 49.5%, 10% 100%);\n    }\n    ${this.config.videoID}-button:focus {\n      outline: none;\n    }\n    .${this.config.videoID}-fullscreen {\n      display: flex;\n      justify-content: center;\n      cursor: pointer;\n    }\n   `;\n      this.createStyle(style);\n      this.canvas = document.getElementById(this.config.videoID);\n      // this.renderContext = window.nw.require(\"webgl-video-renderer\").setupCanvas(this.canvas);\n      this.renderContext = setupCanvas(this.canvas);\n      console.log('Status of renderConetxt', this.renderContext);\n      // this.renderer = window.nw.require(\"wcjs-renderer\");\n      // console.log('Status of render', this.renderer);\n      let vlcOptions = [\"--no-audio\", \"--http-reconnect\"\n      // \"--width=480\",\n      // \"--height=360\"\n      ];\n\n      this.webChimeraPlayer = window.nw.require(\"webchimera.js\").createPlayer(vlcOptions);\n      //ELEMENT SELECTORS\n      this.progressSlider = document.querySelector(`.${this.config.videoID}-progress`);\n      this.progressFill = document.querySelector(`.${this.config.videoID}-progress-filled`);\n      this.textCurrent = document.querySelector(`.${this.config.videoID}-time-current`);\n      this.textTotal = document.querySelector(`.${this.config.videoID}-time-total`);\n      this.player = document.querySelector(`.${this.config.videoID}-player`);\n      this.playBtn = document.querySelector(`.${this.config.videoID}-play-btn`);\n      this.resetBtn = document.querySelector(`.${this.config.videoID}-reset-btn`);\n      this.recordBtn = document.querySelector(`.${this.config.videoID}-record-btn`);\n      this.snapshotBtn = document.querySelector(`.${this.config.videoID}-snapshot-btn`);\n      this.fullscreenBtn = document.querySelector(`.${this.config.videoID}-fullscreen`);\n      this.cssStringVar = this.config.videoID + '-speed-item' + \" \" + this.config.videoID + '-active';\n      setTimeout(() => {\n        this.speedBtns = document.querySelectorAll(`.${this.config.videoID}-speed-item`);\n      }, 1000);\n      if (this.config.autoPlay) this.togglePlay();\n    }\n    //PLAYER FUNCTIONS\n    setSpeed(e, rate) {\n      debugger;\n      this.speedBtns.forEach(speedBtn => {\n        console.log(speedBtn);\n        speedBtn.classList.remove(`${this.config.videoID}-active`);\n      });\n      document.getElementById(e.srcElement.id).classList.add(`${this.config.videoID}-active`);\n      this.webChimeraPlayer.input.rate = rate;\n    }\n    neatTime(time) {\n      var minutes = Math.floor(time / 60000);\n      var seconds = Number((time % 60000 / 1000).toFixed(0));\n      return seconds == 60 ? minutes + 1 + \":00\" : minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    }\n    updateProgress() {\n      this.progressFill.style.width = `${this.currentTime / this.webChimeraPlayer.input.length * 100}%`;\n      this.textCurrent.innerHTML = `${this.neatTime(this.currentTime)} / `;\n    }\n    setProgress(e) {\n      const newTime = e.offsetX / this.progressSlider.offsetWidth;\n      this.progressFill.style.width = `${newTime * 100}%`;\n      console.log(this.webChimeraPlayer.input.length * newTime);\n      this.webChimeraPlayer.input.time = newTime * this.webChimeraPlayer.input.length;\n      this.currentTime = newTime * this.webChimeraPlayer.input.length;\n    }\n    togglePlay() {\n      console.log(this.webChimeraPlayer);\n      if (!this.webChimeraPlayer.playing) {\n        this.playVideo();\n      } else {\n        this.pauseVideo();\n      }\n      this.playBtn.classList.toggle(`${this.config.videoID}-paused`);\n    }\n    launchIntoFullscreen() {\n      if (this.player.requestFullscreen) {\n        this.player.requestFullscreen();\n      } else if (this.player.mozRequestFullScreen) {\n        this.player.mozRequestFullScreen();\n      } else if (this.player.webkitRequestFullscreen) {\n        this.player.webkitRequestFullscreen();\n      } else if (this.player.msRequestFullscreen) {\n        this.player.msRequestFullscreen();\n      }\n    }\n    exitFullscreen() {\n      let self = document;\n      if (self.exitFullscreen) {\n        self.exitFullscreen();\n      } else if (self.mozCancelFullScreen) {\n        self.mozCancelFullScreen();\n      } else if (self.webkitExitFullscreen) {\n        self.webkitExitFullscreen();\n      }\n    }\n    toggleFullscreen() {\n      console.log('fullscreen click');\n      this.fullscreen ? this.exitFullscreen() : this.launchIntoFullscreen();\n      this.fullscreen = !this.fullscreen;\n    }\n    checkInterval() {\n      console.log('Chạy Timeout check luồng');\n      if (this.previousFrame == null && this.currentFrame != null) {\n        //Lần đầu tiên, nếu chưa lưu previous frame thì skip phần check\n        this.previousFrame = new Uint8ClampedArray(this.currentFrame);\n        this.frameCheckTimeout = setTimeout(this.checkInterval.bind(this), 10000);\n      } else {\n        // let currentTime = moment().valueOf();\n        // console.log(this.webChimeraPlayer)\n        // let diff = currentTime - this.frameRecevingTime\n        // console.log(diff)\n        // if (diff >= 5000) {\n        //   console.log('Chênh lệch giữa thời điểm hiện tại và last frame: ', diff)\n        //   //Restart lại player \n        //   this.restartPlayer();\n        // }\n        if (this.currentFrame != null && this.previousFrame != null) {\n          if (!this.typedArraysAreEqual(this.previousFrame, this.currentFrame)) {\n            this.previousFrame = new Uint8ClampedArray(this.currentFrame);\n            this.frameCheckTimeout = setTimeout(this.checkInterval.bind(this), 10000);\n          } else {\n            console.log('Frame cuối đã lưu và lastest giống nhau --> Player đã stop nhận frame. ' + `Restart lại player ${this.config.videoID} lúc ${new Date().toString()}`);\n            this.restartPlayer();\n          }\n        }\n      }\n    }\n    typedArraysAreEqual(a, b) {\n      if (a.byteLength !== b.byteLength) return false;\n      return a.every((val, i) => val === b[i]);\n    }\n    //EVENT LISTENERS\n    playVideo() {\n      console.log('Play hit!');\n      this.statusTxt = 'Đang tải dữ liệu...';\n      try {\n        this.playerStopIntentionally = false;\n        let self = this;\n        this.webChimeraPlayer.onLogMessage = function (level, message, format) {\n          // console.log(message);\n        };\n        this.webChimeraPlayer.onStopped = function () {\n          console.log('Player has been stopped ----------------');\n          self.zone.run(() => {\n            self.statusTxt = 'Luồng đã kết thúc...';\n          });\n          self.frameRecevingTime = null;\n          if (self.frameCheckTimeout != null) clearTimeout(self.frameCheckTimeout);\n          if (self.config.autoRestart && !self.playerStopIntentionally) {\n            setTimeout(() => {\n              console.log(`Restart lại player ${self.config.videoID} lúc ${new Date().toString()} do sự cố mất luồng`);\n              self.restartPlayer();\n            }, 5000);\n          }\n        };\n        this.webChimeraPlayer.onPlaying = function () {\n          console.log('Start Playing ------------------------------------');\n          self.zone.run(() => {\n            self.statusTxt = 'Luồng đang chạy...';\n          });\n          self.currentFrame = null;\n          self.previousFrame = null;\n          if (self.frameCheckTimeout != null) clearTimeout(self.frameCheckTimeout);\n          setTimeout(() => {\n            if (!self.config.isPlayback && self.config.autoRestart) self.checkInterval();\n          }, 10000);\n        };\n        this.webChimeraPlayer.onEndReached = function () {\n          console.log('End of file');\n          if (self.config.isPlayback) {\n            self.playBtn.classList.toggle(`${self.config.videoID}-paused`);\n            self.progressFill.style.width = `100%`;\n            self.currentTime = 0;\n            self.fpsCounter = 0;\n          }\n        };\n        this.webChimeraPlayer.onFrameReady = function (frame) {\n          // console.log(frame)\n          // if (self.frameRecevingTime == null)\n          self.currentFrame = frame;\n          self.frameRecevingTime = moment().valueOf();\n          if (self.config.isPlayback) {\n            if (!self.initSetup) {\n              self.initSetup = true;\n              self.textTotal.innerHTML = self.neatTime(self.webChimeraPlayer.input.length);\n              self.fps = Math.round(self.webChimeraPlayer.input.fps) + 3;\n            }\n            self.fpsCounter += 1;\n            if (self.fpsCounter == self.fps) {\n              self.currentTime += 1000;\n              self.fpsCounter = 0;\n              self.updateProgress();\n            }\n          }\n          try {\n            if (self.renderContext === null || self.renderContext === undefined) {} else {\n              if (self.windowHasFocus) self.renderContext.render(frame, frame.width, frame.height, frame.uOffset, frame.vOffset);\n            }\n          } catch (error) {\n            console.log('Render error --------------------------------------');\n            console.log(error);\n          }\n        };\n        this.webChimeraPlayer.onPaused = function () {\n          console.log('Player đã paused do luồng bị ngừng nhưng hls vẫn chạy');\n        };\n        this.webChimeraPlayer.onEncounteredError = function (error) {\n          console.log('vlc error', error);\n        };\n        if (this.renderContext === null || this.renderContext === undefined) {\n          bind(this.canvas, this.webChimeraPlayer, this.rendererOption);\n        }\n        if (this.config.isPlayback) {\n          if (this.currentTime > 0) {\n            this.webChimeraPlayer.play();\n            this.webChimeraPlayer.input.time = this.currentTime;\n          } else {\n            this.progressFill.style.width = `0%`;\n            this.webChimeraPlayer.play(this.config.url);\n          }\n        } else this.webChimeraPlayer.play(this.config.url);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    pauseVideo() {\n      this.statusTxt = 'Luồng đang tạm dừng ...';\n      if (this.frameCheckTimeout != null) clearTimeout(this.frameCheckTimeout);\n      if (this.webChimeraPlayer.playing) {\n        console.log('Stop hit!');\n        this.playerStopIntentionally = true;\n        if (this.config.isPlayback) {\n          this.webChimeraPlayer.stop();\n        } else {\n          try {\n            this.webChimeraPlayer.stop();\n            if (this.renderContext === null || this.renderContext === undefined) {\n              rendererClear(this.canvas);\n            } else this.renderContext.fillBlack();\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }\n    }\n    createStyle(style) {\n      const styleElement = document.createElement('style');\n      styleElement.appendChild(document.createTextNode(style));\n      this.el.nativeElement.appendChild(styleElement);\n    }\n    ngOnDestroy() {\n      this.pauseVideo();\n    }\n    restartPlayer() {\n      this.statusTxt = 'Luồng đang khởi động lại ...';\n      this.frameRecevingTime = null;\n      if (this.frameCheckTimeout != null) clearTimeout(this.frameCheckTimeout);\n      console.log('Restart Hit --------------');\n      this.resetBtn.classList.add(`${this.config.videoID}-reset-btn-rotation`);\n      if (!this.playBtn.classList.contains(`${this.config.videoID}-paused`)) this.playBtn.classList.add(`${this.config.videoID}-paused`);\n      if (this.config.isPlayback) {\n        this.progressFill.style.width = `100%`;\n        this.currentTime = 0;\n        this.fpsCounter = 0;\n      }\n      this.pauseVideo();\n      setTimeout(() => {\n        this.togglePlay();\n      }, 1000);\n      setTimeout(() => {\n        this.resetBtn.classList.remove(`${this.config.videoID}-reset-btn-rotation`);\n      }, 3000);\n    }\n    recordPlayback() {\n      if (!this.isRecording && this.webChimeraPlayer.playing) {\n        this.isRecording = true;\n        let startTime;\n        this.recordBtn.classList.add(`${this.config.videoID}-record-btn-blink`);\n        this.videoStream = this.canvas.captureStream(30);\n        this.mediaRecorder = new MediaRecorder(this.videoStream);\n        let self = this;\n        this.recordedChunk = [];\n        this.mediaRecorder.ondataavailable = function (e) {\n          self.recordedChunk.push(e.data);\n        };\n        this.mediaRecorder.onstop = function (e) {\n          let duration = Date.now() - startTime;\n          let a = document.createElement(\"a\");\n          document.body.appendChild(a);\n          a.setAttribute('style', 'display: none;');\n          let blobHasNoTime = new Blob(self.recordedChunk, {\n            'type': 'video/webm'\n          });\n          fixWebmDuration(blobHasNoTime, duration, {\n            logger: false\n          }).then(function (fixedBlob) {\n            let videoURL = URL.createObjectURL(fixedBlob);\n            a.href = videoURL;\n            a.download = new Date().toLocaleTimeString();\n            a.click();\n            window.URL.revokeObjectURL(videoURL);\n            self.recordedChunk = [];\n          });\n        };\n        this.mediaRecorder.start();\n        startTime = Date.now();\n      } else {\n        if (this.mediaRecorder != null) {\n          this.mediaRecorder.stop();\n          this.mediaRecorder = null;\n          this.videoStream = null;\n        }\n        this.isRecording = false;\n        this.recordBtn.classList.remove(`${this.config.videoID}-record-btn-blink`);\n      }\n    }\n    snapshotTaking() {\n      if (this.webChimeraPlayer.playing) {\n        this.snapshotBtn.classList.add(`${this.config.videoID}-snapshot-btn-shake`);\n        console.log('Taking SnapShot ------------------------------');\n        this.webChimeraPlayer.pixelFormat = this.webChimeraPlayer.RV32;\n        //Clone currentFrame 1st\n        let frame = new Uint8Array(this.currentFrame);\n        //Put current Frame onto a hidden canvas\n        let snapshotCanvas = document.createElement(\"canvas\");\n        let ctx = snapshotCanvas.getContext(\"2d\");\n        var width = this.currentFrame.width;\n        var height = this.currentFrame.height;\n        let imgData = ctx.createImageData(width, height);\n        var buf = imgData.data;\n        for (var i = 0; i < height; ++i) {\n          for (var j = 0; j < width; ++j) {\n            var o = (j + width * i) * 4;\n            buf[o + 0] = frame[o + 2];\n            buf[o + 1] = frame[o + 1];\n            buf[o + 2] = frame[o + 0];\n            buf[o + 3] = frame[o + 3];\n          }\n        }\n        ;\n        ctx.putImageData(imgData, 0, 0);\n        let a = document.createElement(\"a\");\n        let imgURL = snapshotCanvas.toDataURL('image/png', 1.0);\n        console.log(imgURL);\n        a.href = imgURL;\n        a.download = new Date().toLocaleTimeString();\n        a.click();\n        a.remove();\n        this.webChimeraPlayer.pixelFormat = this.webChimeraPlayer.I420;\n        setTimeout(() => {\n          this.snapshotBtn.classList.remove(`${this.config.videoID}-snapshot-btn-shake`);\n        }, 500);\n      }\n    }\n    snapshotTakingFromRecord() {\n      if (this.webChimeraPlayer.playing) {\n        this.snapshotBtn.classList.add(`${this.config.videoID}-snapshot-btn-shake`);\n        console.log('Taking SnapShot ------------------------------');\n        let videoStream = this.canvas.captureStream(24);\n        let mediaRecorder = new MediaRecorder(videoStream);\n        let self = this;\n        let recordedChunk = [];\n        mediaRecorder.ondataavailable = function (e) {\n          recordedChunk.push(e.data);\n        };\n        mediaRecorder.onstop = function (e) {\n          let video = document.createElement(\"video\");\n          video.autoplay = false;\n          video.loop = false;\n          video.setAttribute('style', 'display: none;');\n          video.addEventListener(\"loadeddata\", function () {\n            // Let's wait another 100ms just in case?\n            setTimeout(function () {\n              // Create a canvas element, this is what user sees.\n              let canvas = document.createElement(\"canvas\");\n              // Set it to same dimensions as video.\n              canvas.width = video.videoWidth;\n              canvas.height = video.videoHeight;\n              // Get the drawing context for canvas.\n              var ctx = canvas.getContext(\"2d\");\n              // Draw the current frame of video onto canvas.\n              ctx.drawImage(video, 0, 0);\n              let a = document.createElement(\"a\");\n              a.setAttribute('style', 'display: none;');\n              a.href = canvas.toDataURL('image/png', 1.0);\n              a.download = new Date().toLocaleTimeString();\n              a.click();\n              window.URL.revokeObjectURL(videoURL);\n              a.remove();\n            });\n          }, false);\n          let blob = new Blob(recordedChunk, {\n            'type': 'video/mp4'\n          });\n          let videoURL = URL.createObjectURL(blob);\n          video.src = videoURL;\n          recordedChunk = [];\n        };\n        mediaRecorder.start();\n        setTimeout(() => {\n          mediaRecorder.stop();\n          this.snapshotBtn.classList.remove(`${this.config.videoID}-snapshot-btn-shake`);\n        }, 500);\n      }\n    }\n    changeImgSource(event, newSrc) {\n      event.target.src = newSrc;\n    }\n  }\n  _class = IvmsplayerComponent;\n  _class.ɵfac = function IvmsplayerComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-ivmsplayer\"]],\n    inputs: {\n      config: \"config\"\n    },\n    decls: 18,\n    vars: 28,\n    consts: [[3, \"class\", 4, \"ngIf\"], [2, \"width\", \"100%\", \"height\", \"auto\"], [4, \"ngIf\"], [\"src\", \"../../../assets/imgs/video_recording.svg\", 3, \"click\", \"error\"], [\"src\", \"../../../assets/imgs/video_refresh.svg\", 3, \"click\", \"error\"], [\"src\", \"../../../assets/imgs/video_snapshot.svg\", 3, \"click\", \"error\"], [3, \"click\"], [\"width\", \"30\", \"height\", \"22\", \"viewBox\", \"0 0 30 22\", \"fill\", \"none\", \"xmlns\", \"http://www.w3.org/2000/svg\"], [\"d\", \"M0 0V-1.5H-1.5V0H0ZM0 18H-1.5V19.5H0V18ZM26 18V19.5H27.5V18H26ZM26 0H27.5V-1.5H26V0ZM1.5 6.54545V0H-1.5V6.54545H1.5ZM0 1.5H10.1111V-1.5H0V1.5ZM-1.5 11.4545V18H1.5V11.4545H-1.5ZM0 19.5H10.1111V16.5H0V19.5ZM24.5 11.4545V18H27.5V11.4545H24.5ZM26 16.5H15.8889V19.5H26V16.5ZM27.5 6.54545V0H24.5V6.54545H27.5ZM26 -1.5H15.8889V1.5H26V-1.5Z\", \"transform\", \"translate(2 2)\", \"fill\", \"white\"], [3, \"id\", \"click\"], [3, \"ngClass\", \"id\", \"click\", 4, \"ngIf\"], [3, \"ngClass\", \"id\", \"click\"]],\n    template: function IvmsplayerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n        i0.ɵɵtemplate(2, IvmsplayerComponent_h2_2_Template, 2, 3, \"h2\", 0);\n        i0.ɵɵelement(3, \"canvas\", 1)(4, \"div\");\n        i0.ɵɵelementStart(5, \"div\");\n        i0.ɵɵtemplate(6, IvmsplayerComponent_ng_container_6_Template, 6, 10, \"ng-container\", 2);\n        i0.ɵɵelementStart(7, \"div\")(8, \"div\")(9, \"img\", 3);\n        i0.ɵɵlistener(\"click\", function IvmsplayerComponent_Template_img_click_9_listener() {\n          return ctx.recordPlayback();\n        })(\"error\", function IvmsplayerComponent_Template_img_error_9_listener($event) {\n          return ctx.changeImgSource($event, \"assets/imgs/video_recording.svg\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"img\", 4);\n        i0.ɵɵlistener(\"click\", function IvmsplayerComponent_Template_img_click_10_listener() {\n          return ctx.restartPlayer();\n        })(\"error\", function IvmsplayerComponent_Template_img_error_10_listener($event) {\n          return ctx.changeImgSource($event, \"assets/imgs/video_refresh.svg\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"img\", 5);\n        i0.ɵɵlistener(\"click\", function IvmsplayerComponent_Template_img_click_11_listener() {\n          return ctx.snapshotTakingFromRecord();\n        })(\"error\", function IvmsplayerComponent_Template_img_error_11_listener($event) {\n          return ctx.changeImgSource($event, \"assets/imgs/video_snapshot.svg\");\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵlistener(\"click\", function IvmsplayerComponent_Template_div_click_12_listener() {\n          return ctx.togglePlay();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵtemplate(14, IvmsplayerComponent_div_14_Template, 11, 17, \"div\", 0);\n        i0.ɵɵelementStart(15, \"div\", 6);\n        i0.ɵɵlistener(\"click\", function IvmsplayerComponent_Template_div_click_15_listener() {\n          return ctx.toggleFullscreen();\n        });\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(16, \"svg\", 7);\n        i0.ɵɵelement(17, \"path\", 8);\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.config.videoID + \"-player-container\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-player\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.statusTxt.length > 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"id\", ctx.config.videoID);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-play-btn-big\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-controls\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.config.isPlayback);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-controls-main\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-controls-left\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-record-btn\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-reset-btn\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-snapshot-btn\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-play-btn\" + \" \" + ctx.config.videoID + \"-paused\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-controls-right\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.config.isPlayback);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.config.videoID + \"-fullscreen\");\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgIf]\n  });\n  return IvmsplayerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}