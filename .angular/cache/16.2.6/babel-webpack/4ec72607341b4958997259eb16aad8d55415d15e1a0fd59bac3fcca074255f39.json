{"ast":null,"code":"import { __decorate as t } from \"tslib\";\nimport { html as i } from \"lit\";\nimport { CdsBaseButton as e, I18nService as s, LogService as o, baseStyles as r, property as n, i18n as a, state as d } from \"@cds/core/internal\";\nimport p from \"./button-action.element.scss.js\";\nclass c extends e {\n  constructor() {\n    super(...arguments);\n    this.i18n = s.keys.actions, this.cdsButtonAction = !0;\n  }\n  render() {\n    return i`<div class=\"private-host\"><slot><cds-icon .shape=\"${this.shape ? this.shape : \"ellipsis-vertical\"}\" .size=\"${this.iconSize}\" ?solid=\"${this.pressed || this.expanded}\" inner-offset=\"${1}\"></cds-icon></slot></div>`;\n  }\n  updated(t) {\n    super.updated(t), this.ariaLabel || this.readonly || o.warn(\"A aria-label is required for interactive cds-button-action type\", this), t.has(\"readonly\") && (this.readonly && !this.hasAttribute(\"aria-label\") ? this.ariaHidden = \"true\" : this.ariaHidden = null);\n  }\n}\nc.styles = [r, p], t([n({\n  type: String\n})], c.prototype, \"shape\", void 0), t([n({\n  type: String,\n  reflect: !0\n})], c.prototype, \"action\", void 0), t([n({\n  type: String\n})], c.prototype, \"iconSize\", void 0), t([a()], c.prototype, \"i18n\", void 0), t([d({\n  type: Boolean,\n  reflect: !0,\n  attribute: \"cds-button-action\"\n})], c.prototype, \"cdsButtonAction\", void 0);\nexport { c as CdsButtonAction };\n//# sourceMappingURL=button-action.element.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}