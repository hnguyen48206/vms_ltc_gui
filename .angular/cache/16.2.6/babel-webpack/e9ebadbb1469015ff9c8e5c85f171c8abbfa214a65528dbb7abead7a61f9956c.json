{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HoangN/Desktop/NW/LTC_GUI/base_ltc_clarity/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { initializeKeyListItems as t, setActiveKeyListItem as e, focusElement as s } from \"../utils/focus.js\";\nimport { validKeyNavigationCode as i } from \"../utils/keycodes.js\";\nimport { getFlattenedFocusableItems as o } from \"../utils/traversal.js\";\nimport { getNextKeyListItem as n } from \"./key-navigation.utils.js\";\nfunction a(t = {}) {\n  return e => {\n    e.addInitializer(e => {\n      e.keyNavigationListController || (e.keyNavigationListController = new c(e, t));\n    });\n  };\n}\nclass c {\n  constructor(t, e = {}) {\n    this.host = t, this.host.addController(this), this.config = {\n      keyListItems: \"keyListItems\",\n      layout: \"horizontal\",\n      manageFocus: !0,\n      manageTabindex: !0,\n      loop: !1,\n      dir: this.host.getAttribute(\"rtl\"),\n      ...e\n    };\n  }\n  get listItems() {\n    return this.host[this.config.keyListItems];\n  }\n  hostConnected() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _this$host$shadowRoot, _this$host$shadowRoot2;\n      yield _this.host.updateComplete, _this.initializeTabIndex(), _this.host.addEventListener(\"click\", t => _this.clickItem(t)), _this.host.addEventListener(\"keydown\", t => _this.focusItem(t)), (_this$host$shadowRoot = _this.host.shadowRoot) !== null && _this$host$shadowRoot !== void 0 && _this$host$shadowRoot.addEventListener(\"click\", t => _this.clickItem(t)), (_this$host$shadowRoot2 = _this.host.shadowRoot) === null || _this$host$shadowRoot2 === void 0 ? void 0 : _this$host$shadowRoot2.addEventListener(\"keydown\", t => _this.focusItem(t));\n    })();\n  }\n  initializeTabIndex() {\n    this.config.manageFocus && this.config.manageTabindex && t(this.listItems);\n  }\n  clickItem(t) {\n    const e = this.getActiveItem(t);\n    e && this.setActiveItem(t, e);\n  }\n  focusItem(t) {\n    if (i(t)) {\n      const e = this.getActiveItem(t);\n      if (e) {\n        const {\n          next: s,\n          previous: i\n        } = n(e, Array.from(this.listItems), {\n          ...this.config,\n          code: t.code\n        });\n        s !== i && this.setActiveItem(t, this.listItems[s], this.listItems[i]);\n      }\n    }\n  }\n  getActiveItem(t) {\n    return Array.from(this.listItems).find(e => {\n      var _ref;\n      return (_ref = e === t.target.closest(this.listItems[0].tagName.toLocaleLowerCase())) !== null && _ref !== void 0 ? _ref : e === t.target;\n    });\n  }\n  setActiveItem(t, i, n) {\n    if (this.config.manageFocus) {\n      var _o$;\n      this.config.manageTabindex && e(this.listItems, i);\n      const n = (_o$ = o(i)[0]) !== null && _o$ !== void 0 ? _o$ : i;\n      s(n), t.preventDefault();\n    }\n    i.dispatchEvent(new CustomEvent(\"cdsKeyChange\", {\n      bubbles: !0,\n      detail: {\n        activeItem: i,\n        previousItem: n,\n        code: t.code,\n        metaKey: t.ctrlKey || t.metaKey,\n        keyListItems: this.config.keyListItems\n      }\n    }));\n  }\n}\nexport { c as KeyNavigationListController, a as keyNavigationList };\n//# sourceMappingURL=key-navigation-list.controller.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}