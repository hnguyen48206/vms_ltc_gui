{"ast":null,"code":"import { NgForOf, NgStyle, NgIf } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, Input, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, NgZone, Inject, Output, HostBinding, NgModule } from '@angular/core';\nimport { Subject, debounceTime, takeUntil, switchMap, timer } from 'rxjs';\nfunction _class2_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.gridRenderer.getGridColumnStyle(i_r3));\n  }\n}\nfunction _class2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 4);\n  }\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.gridRenderer.getGridRowStyle(i_r5));\n  }\n}\nconst _c0 = [\"*\"];\nfunction _class3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵlistener(\"mousedown\", function _class3_div_1_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.resize.dragStartDelay($event));\n    })(\"touchstart\", function _class3_div_1_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction _class3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mousedown\", function _class3_div_2_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.resize.dragStartDelay($event));\n    })(\"touchstart\", function _class3_div_2_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction _class3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"mousedown\", function _class3_div_3_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.resize.dragStartDelay($event));\n    })(\"touchstart\", function _class3_div_3_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction _class3_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵlistener(\"mousedown\", function _class3_div_4_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.resize.dragStartDelay($event));\n    })(\"touchstart\", function _class3_div_4_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction _class3_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵlistener(\"mousedown\", function _class3_div_5_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.resize.dragStartDelay($event));\n    })(\"touchstart\", function _class3_div_5_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction _class3_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵlistener(\"mousedown\", function _class3_div_6_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.resize.dragStartDelay($event));\n    })(\"touchstart\", function _class3_div_6_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction _class3_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵlistener(\"mousedown\", function _class3_div_7_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.resize.dragStartDelay($event));\n    })(\"touchstart\", function _class3_div_7_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction _class3_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵlistener(\"mousedown\", function _class3_div_8_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.resize.dragStartDelay($event));\n    })(\"touchstart\", function _class3_div_8_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nvar GridType = /*#__PURE__*/function (GridType) {\n  GridType[\"Fit\"] = \"fit\";\n  GridType[\"ScrollVertical\"] = \"scrollVertical\";\n  GridType[\"ScrollHorizontal\"] = \"scrollHorizontal\";\n  GridType[\"Fixed\"] = \"fixed\";\n  GridType[\"VerticalFixed\"] = \"verticalFixed\";\n  GridType[\"HorizontalFixed\"] = \"horizontalFixed\";\n  return GridType;\n}(GridType || {});\nvar DisplayGrid = /*#__PURE__*/function (DisplayGrid) {\n  DisplayGrid[\"Always\"] = \"always\";\n  DisplayGrid[\"OnDragAndResize\"] = \"onDrag&Resize\";\n  DisplayGrid[\"None\"] = \"none\";\n  return DisplayGrid;\n}(DisplayGrid || {});\nvar CompactType = /*#__PURE__*/function (CompactType) {\n  CompactType[\"None\"] = \"none\";\n  CompactType[\"CompactUp\"] = \"compactUp\";\n  CompactType[\"CompactLeft\"] = \"compactLeft\";\n  CompactType[\"CompactUpAndLeft\"] = \"compactUp&Left\";\n  CompactType[\"CompactLeftAndUp\"] = \"compactLeft&Up\";\n  CompactType[\"CompactRight\"] = \"compactRight\";\n  CompactType[\"CompactUpAndRight\"] = \"compactUp&Right\";\n  CompactType[\"CompactRightAndUp\"] = \"compactRight&Up\";\n  CompactType[\"CompactDown\"] = \"compactDown\";\n  CompactType[\"CompactDownAndLeft\"] = \"compactDown&Left\";\n  CompactType[\"CompactLeftAndDown\"] = \"compactLeft&Down\";\n  CompactType[\"CompactDownAndRight\"] = \"compactDown&Right\";\n  CompactType[\"CompactRightAndDown\"] = \"compactRight&Down\";\n  return CompactType;\n}(CompactType || {});\nvar DirTypes = /*#__PURE__*/function (DirTypes) {\n  DirTypes[\"LTR\"] = \"ltr\";\n  DirTypes[\"RTL\"] = \"rtl\";\n  return DirTypes;\n}(DirTypes || {});\nclass GridsterCompact {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n  destroy() {\n    this.gridster = null;\n  }\n  checkCompact() {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', 1);\n      }\n    }\n  }\n  checkCompactItem(item) {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.moveTillCollision(item, 'x', 1);\n        this.moveTillCollision(item, 'y', 1);\n      }\n    }\n  }\n  checkCompactMovement(direction, delta) {\n    let widgetMoved = false;\n    this.gridster.grid.forEach(widget => {\n      if (widget.$item.compactEnabled !== false) {\n        const moved = this.moveTillCollision(widget.$item, direction, delta);\n        if (moved) {\n          widgetMoved = true;\n          widget.item[direction] = widget.$item[direction];\n          widget.itemChanged();\n        }\n      }\n    });\n    if (widgetMoved) {\n      this.checkCompact();\n    }\n  }\n  moveTillCollision(item, direction, delta) {\n    item[direction] += delta;\n    if (this.gridster.checkCollision(item)) {\n      item[direction] -= delta;\n      return false;\n    } else {\n      this.moveTillCollision(item, direction, delta);\n      return true;\n    }\n  }\n}\nconst GridsterConfigService = {\n  gridType: GridType.Fit,\n  scale: 1,\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250,\n  fixedRowHeight: 250,\n  keepFixedHeightInMobile: false,\n  keepFixedWidthInMobile: false,\n  setGridSize: false,\n  compactType: CompactType.None,\n  mobileBreakpoint: 640,\n  useBodyForBreakpoint: false,\n  allowMultiLayer: false,\n  defaultLayerIndex: 0,\n  maxLayerIndex: 2,\n  baseLayerIndex: 1,\n  minCols: 1,\n  maxCols: 100,\n  minRows: 1,\n  maxRows: 100,\n  defaultItemCols: 1,\n  defaultItemRows: 1,\n  maxItemCols: 50,\n  maxItemRows: 50,\n  minItemCols: 1,\n  minItemRows: 1,\n  minItemArea: 1,\n  maxItemArea: 2500,\n  addEmptyRowsCount: 0,\n  rowHeightRatio: 1,\n  margin: 10,\n  outerMargin: true,\n  outerMarginTop: null,\n  outerMarginRight: null,\n  outerMarginBottom: null,\n  outerMarginLeft: null,\n  useTransformPositioning: true,\n  scrollSensitivity: 10,\n  scrollSpeed: 20,\n  initCallback: undefined,\n  destroyCallback: undefined,\n  gridSizeChangedCallback: undefined,\n  itemChangeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false,\n  enableEmptyCellContextMenu: false,\n  enableEmptyCellDrop: false,\n  enableEmptyCellDrag: false,\n  enableOccupiedCellDrop: false,\n  emptyCellClickCallback: undefined,\n  emptyCellContextMenuCallback: undefined,\n  emptyCellDropCallback: undefined,\n  emptyCellDragCallback: undefined,\n  emptyCellDragMaxCols: 50,\n  emptyCellDragMaxRows: 50,\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false,\n  draggable: {\n    delayStart: 0,\n    enabled: false,\n    ignoreContentClass: 'gridster-item-content',\n    ignoreContent: false,\n    dragHandleClass: 'drag-handler',\n    stop: undefined,\n    start: undefined,\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false,\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n  },\n\n  resizable: {\n    delayStart: 0,\n    enabled: false,\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    },\n    stop: undefined,\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n  },\n\n  swap: true,\n  swapWhileDragging: false,\n  pushItems: false,\n  disablePushOnDrag: false,\n  disablePushOnResize: false,\n  pushDirections: {\n    north: true,\n    east: true,\n    south: true,\n    west: true\n  },\n  pushResizeItems: false,\n  displayGrid: DisplayGrid.OnDragAndResize,\n  disableWindowResize: false,\n  disableWarnings: false,\n  scrollToNewItems: false,\n  disableScrollHorizontal: false,\n  disableScrollVertical: false,\n  enableBoundaryControl: false,\n  disableAutoPositionOnConflict: false,\n  dirType: DirTypes.LTR // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\n};\n\nclass GridsterUtils {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static merge(obj1, obj2, properties) {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          // create an empty object for the property if obj1 does not already have one.\n          if (!(p in obj1)) {\n            obj1[p] = {};\n          }\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n    return obj1;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static checkTouchEvent(e) {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n  static checkContentClassForEvent(gridster, e) {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkDragHandleClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static checkContentClassForEmptyCellClickEvent(gridster, e) {\n    return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass) || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n  }\n  static checkDragHandleClass(target, current, dragHandleClass, ignoreContentClass) {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class')) {\n      const classnames = target.getAttribute('class').split(' ');\n      if (classnames.indexOf(dragHandleClass) > -1) {\n        return true;\n      }\n      if (classnames.indexOf(ignoreContentClass) > -1) {\n        return false;\n      }\n    }\n    return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\n  }\n  static checkContentClass(target, current, contentClass) {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n  static compareItems(a, b) {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\nclass GridsterEmptyCell {\n  constructor(gridster) {\n    this.gridster = gridster;\n    this.emptyCellClickCb = e => {\n      if (!this.gridster || this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n      const item = this.getValidItemFromEvent(e);\n      if (!item) {\n        return;\n      }\n      if (this.gridster.options.emptyCellClickCallback) {\n        this.gridster.options.emptyCellClickCallback(e, item);\n      }\n      this.gridster.cdRef.markForCheck();\n    };\n    this.emptyCellContextMenuCb = e => {\n      if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e);\n      if (!item) {\n        return;\n      }\n      if (this.gridster.options.emptyCellContextMenuCallback) {\n        this.gridster.options.emptyCellContextMenuCallback(e, item);\n      }\n      this.gridster.cdRef.markForCheck();\n    };\n    this.emptyCellDragDrop = e => {\n      const item = this.getValidItemFromEvent(e);\n      if (!item) {\n        return;\n      }\n      if (this.gridster.options.emptyCellDropCallback) {\n        this.gridster.options.emptyCellDropCallback(e, item);\n      }\n      this.gridster.cdRef.markForCheck();\n    };\n    this.emptyCellDragOver = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e);\n      if (item) {\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'move';\n        }\n        this.gridster.movingItem = item;\n      } else {\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'none';\n        }\n        this.gridster.movingItem = null;\n      }\n      this.gridster.previewStyle();\n    };\n    this.emptyCellMouseDown = e => {\n      if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e);\n      const leftMouseButtonCode = 1;\n      if (!item || e.buttons !== leftMouseButtonCode && !(e instanceof TouchEvent)) {\n        return;\n      }\n      this.initialItem = item;\n      this.gridster.movingItem = item;\n      this.gridster.previewStyle();\n      this.gridster.zone.runOutsideAngular(() => {\n        this.removeWindowMousemoveListenerFn = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove);\n        this.removeWindowTouchmoveListenerFn = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove);\n      });\n      this.removeWindowMouseupListenerFn = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp);\n      this.removeWindowTouchendListenerFn = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp);\n    };\n    this.emptyCellMouseMove = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e, this.initialItem);\n      if (!item) {\n        return;\n      }\n      this.gridster.movingItem = item;\n      this.gridster.previewStyle();\n    };\n    this.emptyCellMouseUp = e => {\n      this.removeWindowMousemoveListenerFn();\n      this.removeWindowTouchmoveListenerFn();\n      this.removeWindowMouseupListenerFn();\n      this.removeWindowTouchendListenerFn();\n      const item = this.getValidItemFromEvent(e, this.initialItem);\n      if (item) {\n        this.gridster.movingItem = item;\n      }\n      if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n        this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n      }\n      setTimeout(() => {\n        this.initialItem = null;\n        if (this.gridster) {\n          this.gridster.movingItem = null;\n          this.gridster.previewStyle();\n        }\n      });\n      this.gridster.cdRef.markForCheck();\n    };\n  }\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    this.gridster.movingItem = null;\n    this.initialItem = this.gridster = null;\n    if (this.removeDocumentDragendListenerFn) {\n      this.removeDocumentDragendListenerFn();\n      this.removeDocumentDragendListenerFn = null;\n    }\n  }\n  updateOptions() {\n    if (this.gridster.$options.enableEmptyCellClick && !this.removeEmptyCellClickListenerFn && this.gridster.options.emptyCellClickCallback) {\n      this.removeEmptyCellClickListenerFn = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb);\n      this.removeEmptyCellTouchendListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb);\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.removeEmptyCellClickListenerFn && this.removeEmptyCellTouchendListenerFn) {\n      this.removeEmptyCellClickListenerFn();\n      this.removeEmptyCellTouchendListenerFn();\n      this.removeEmptyCellClickListenerFn = null;\n      this.removeEmptyCellTouchendListenerFn = null;\n    }\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.removeEmptyCellContextMenuListenerFn && this.gridster.options.emptyCellContextMenuCallback) {\n      this.removeEmptyCellContextMenuListenerFn = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb);\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.removeEmptyCellContextMenuListenerFn) {\n      this.removeEmptyCellContextMenuListenerFn();\n      this.removeEmptyCellContextMenuListenerFn = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrop && !this.removeEmptyCellDropListenerFn && this.gridster.options.emptyCellDropCallback) {\n      this.removeEmptyCellDropListenerFn = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop);\n      this.gridster.zone.runOutsideAngular(() => {\n        this.removeEmptyCellDragoverListenerFn = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver);\n      });\n      this.removeDocumentDragendListenerFn = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.removeEmptyCellDropListenerFn && this.removeEmptyCellDragoverListenerFn && this.removeDocumentDragendListenerFn) {\n      this.removeEmptyCellDropListenerFn();\n      this.removeEmptyCellDragoverListenerFn();\n      this.removeDocumentDragendListenerFn();\n      this.removeEmptyCellDragoverListenerFn = null;\n      this.removeEmptyCellDropListenerFn = null;\n      this.removeDocumentDragendListenerFn = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrag && !this.removeEmptyCellMousedownListenerFn && this.gridster.options.emptyCellDragCallback) {\n      this.removeEmptyCellMousedownListenerFn = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown);\n      this.removeEmptyCellTouchstartListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown);\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.removeEmptyCellMousedownListenerFn && this.removeEmptyCellTouchstartListenerFn) {\n      this.removeEmptyCellMousedownListenerFn();\n      this.removeEmptyCellTouchstartListenerFn();\n      this.removeEmptyCellMousedownListenerFn = null;\n      this.removeEmptyCellTouchstartListenerFn = null;\n    }\n  }\n  getPixelsX(e, rect) {\n    const scale = this.gridster.options.scale;\n    if (scale) {\n      return (e.clientX - rect.left) / scale + this.gridster.el.scrollLeft - this.gridster.gridRenderer.getLeftMargin();\n    }\n    return e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.gridRenderer.getLeftMargin();\n  }\n  getPixelsY(e, rect) {\n    const scale = this.gridster.options.scale;\n    if (scale) {\n      return (e.clientY - rect.top) / scale + this.gridster.el.scrollTop - this.gridster.gridRenderer.getTopMargin();\n    }\n    return e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.gridRenderer.getTopMargin();\n  }\n  getValidItemFromEvent(e, oldItem) {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = this.getPixelsX(e, rect);\n    const y = this.getPixelsY(e, rect);\n    const item = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n    if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\n      return;\n    }\n    return item;\n  }\n}\nclass GridsterRenderer {\n  constructor(gridster) {\n    this.gridster = gridster;\n    /**\n     * Caches the last grid column styles.\n     * This improves the grid responsiveness by caching and reusing the last style object instead of creating a new one.\n     */\n    this.lastGridColumnStyles = {};\n    /**\n     * Caches the last grid column styles.\n     * This improves the grid responsiveness by caching and reusing the last style object instead of creating a new one.\n     */\n    this.lastGridRowStyles = {};\n  }\n  destroy() {\n    this.gridster = null;\n  }\n  updateItem(el, item, renderer) {\n    if (this.gridster.mobile) {\n      this.clearCellPosition(renderer, el);\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', (item.rows - 1) * this.gridster.$options.margin + item.rows * this.gridster.$options.fixedRowHeight + 'px');\n      } else {\n        renderer.setStyle(el, 'height', item.rows * this.gridster.curWidth / item.cols + 'px');\n      }\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = this.gridster.curRowHeight * item.rows - this.gridster.$options.margin;\n      // set the cell style\n      this.setCellPosition(renderer, el, x, y);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom = null;\n      let marginRight = null;\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\n    }\n  }\n  updateGridster() {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth * this.gridster.$options.rowHeightRatio;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      const widthRatio = this.gridster.$options.rowHeightRatio;\n      const calWidthRatio = widthRatio >= 1 ? widthRatio : widthRatio + 1;\n      this.gridster.curColWidth = this.gridster.curRowHeight * calWidthRatio;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n    if (this.gridster.mobile || this.gridster.$options.setGridSize && this.gridster.$options.gridType !== GridType.Fit) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n  getGridColumnStyle(i) {\n    // generates the new style\n    const newPos = {\n      left: this.gridster.curColWidth * i,\n      width: this.gridster.curColWidth - this.gridster.$options.margin,\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin,\n      style: {}\n    };\n    newPos.style = {\n      ...this.getLeftPosition(newPos.left),\n      width: newPos.width + 'px',\n      height: newPos.height + 'px'\n    };\n    // use the last cached style if it has same values as the generated one\n    const last = this.lastGridColumnStyles[i];\n    if (last && last.left === newPos.left && last.width === newPos.width && last.height === newPos.height) {\n      return last.style;\n    }\n    // cache and set new style\n    this.lastGridColumnStyles[i] = newPos;\n    return newPos.style;\n  }\n  getGridRowStyle(i) {\n    // generates the new style\n    const newPos = {\n      top: this.gridster.curRowHeight * i,\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth + this.gridster.$options.margin,\n      height: this.gridster.curRowHeight - this.gridster.$options.margin,\n      style: {}\n    };\n    newPos.style = {\n      ...this.getTopPosition(newPos.top),\n      width: newPos.width + 'px',\n      height: newPos.height + 'px'\n    };\n    // use the last cached style if it has same values as the generated one\n    const last = this.lastGridRowStyles[i];\n    if (last && last.top === newPos.top && last.width === newPos.width && last.height === newPos.height) {\n      return last.style;\n    }\n    // cache and set new style\n    this.lastGridRowStyles[i] = newPos;\n    return newPos.style;\n  }\n  getLeftPosition(d) {\n    const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateX(' + dPosition + 'px)'\n      };\n    } else {\n      return {\n        left: this.getLeftMargin() + dPosition + 'px'\n      };\n    }\n  }\n  getTopPosition(d) {\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateY(' + d + 'px)'\n      };\n    } else {\n      return {\n        top: this.getTopMargin() + d + 'px'\n      };\n    }\n  }\n  clearCellPosition(renderer, el) {\n    if (this.gridster.$options.useTransformPositioning) {\n      renderer.setStyle(el, 'transform', '');\n    } else {\n      renderer.setStyle(el, 'top', '');\n      renderer.setStyle(el, 'left', '');\n    }\n  }\n  setCellPosition(renderer, el, x, y) {\n    const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\n    if (this.gridster.$options.useTransformPositioning) {\n      const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n    } else {\n      renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\n      renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n    }\n  }\n  getLeftMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginLeft !== null) {\n        return this.gridster.$options.outerMarginLeft;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n  getTopMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginTop !== null) {\n        return this.gridster.$options.outerMarginTop;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n}\nlet GridsterPreviewComponent = /*#__PURE__*/(() => {\n  var _class;\n  class GridsterPreviewComponent {\n    constructor(el, renderer) {\n      this.renderer = renderer;\n      this.el = el.nativeElement;\n    }\n    ngOnInit() {\n      this.sub = this.previewStyle$.subscribe(options => this.previewStyle(options));\n    }\n    ngOnDestroy() {\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n    }\n    previewStyle(item) {\n      if (item) {\n        this.renderer.setStyle(this.el, 'display', 'block');\n        this.gridRenderer.updateItem(this.el, item, this.renderer);\n      } else {\n        this.renderer.setStyle(this.el, 'display', '');\n      }\n    }\n  }\n  _class = GridsterPreviewComponent;\n  _class.ɵfac = function _class_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  _class.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"gridster-preview\"]],\n    inputs: {\n      previewStyle$: \"previewStyle$\",\n      gridRenderer: \"gridRenderer\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 0,\n    vars: 0,\n    template: function _class_Template(rf, ctx) {},\n    styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"],\n    encapsulation: 2\n  });\n  return GridsterPreviewComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet GridsterComponent = /*#__PURE__*/(() => {\n  var _class2;\n  class GridsterComponent {\n    constructor(el, renderer, cdRef, zone) {\n      this.renderer = renderer;\n      this.cdRef = cdRef;\n      this.zone = zone;\n      this.columns = 0;\n      this.rows = 0;\n      this.gridColumns = [];\n      this.gridRows = [];\n      this.previewStyle$ = new EventEmitter();\n      this.calculateLayout$ = new Subject();\n      this.resize$ = new Subject();\n      this.destroy$ = new Subject();\n      this.optionsChanged = () => {\n        this.setOptions();\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex >= 0; widgetsIndex--) {\n          widget = this.grid[widgetsIndex];\n          widget.updateOptions();\n        }\n        this.calculateLayout();\n      };\n      this.onResize = () => {\n        if (this.el.clientWidth) {\n          if (this.options.setGridSize) {\n            // reset width/height so the size is recalculated afterwards\n            this.renderer.setStyle(this.el, 'width', '');\n            this.renderer.setStyle(this.el, 'height', '');\n          }\n          this.setGridSize();\n          this.calculateLayout();\n        }\n      };\n      this.getNextPossiblePosition = (newItem, startingFrom = {}) => {\n        if (newItem.cols === -1) {\n          newItem.cols = this.$options.defaultItemCols;\n        }\n        if (newItem.rows === -1) {\n          newItem.rows = this.$options.defaultItemRows;\n        }\n        this.setGridDimensions();\n        let rowsIndex = startingFrom.y || 0;\n        let colsIndex;\n        for (; rowsIndex < this.rows; rowsIndex++) {\n          newItem.y = rowsIndex;\n          colsIndex = startingFrom.x || 0;\n          for (; colsIndex < this.columns; colsIndex++) {\n            newItem.x = colsIndex;\n            if (!this.checkCollision(newItem)) {\n              return true;\n            }\n          }\n        }\n        const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n        const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n        const addToRows = this.rows <= this.columns && canAddToRows;\n        if (!addToRows && canAddToColumns) {\n          newItem.x = this.columns;\n          newItem.y = 0;\n          return true;\n        } else if (canAddToRows) {\n          newItem.y = this.rows;\n          newItem.x = 0;\n          return true;\n        }\n        return false;\n      };\n      this.getFirstPossiblePosition = item => {\n        const tmpItem = Object.assign({}, item);\n        this.getNextPossiblePosition(tmpItem);\n        return tmpItem;\n      };\n      this.getLastPossiblePosition = item => {\n        let farthestItem = {\n          y: 0,\n          x: 0\n        };\n        farthestItem = this.grid.reduce((prev, curr) => {\n          const currCoords = {\n            y: curr.$item.y + curr.$item.rows - 1,\n            x: curr.$item.x + curr.$item.cols - 1\n          };\n          if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n            return currCoords;\n          } else {\n            return prev;\n          }\n        }, farthestItem);\n        const tmpItem = Object.assign({}, item);\n        this.getNextPossiblePosition(tmpItem, farthestItem);\n        return tmpItem;\n      };\n      this.el = el.nativeElement;\n      this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n      this.mobile = false;\n      this.curWidth = 0;\n      this.curHeight = 0;\n      this.grid = [];\n      this.curColWidth = 0;\n      this.curRowHeight = 0;\n      this.dragInProgress = false;\n      this.emptyCell = new GridsterEmptyCell(this);\n      this.compact = new GridsterCompact(this);\n      this.gridRenderer = new GridsterRenderer(this);\n    }\n    // ------ Function for swapWhileDragging option\n    // identical to checkCollision() except that here we add boundaries.\n    static checkCollisionTwoItemsForSwaping(item, item2) {\n      // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n      const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n      const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n      const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n      const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n      return item.x + horizontalBoundaryItem1 < item2.x + item2.cols && item.x + item.cols > item2.x + horizontalBoundaryItem2 && item.y + verticalBoundaryItem1 < item2.y + item2.rows && item.y + item.rows > item2.y + verticalBoundaryItem2;\n    }\n    checkCollisionTwoItems(item, item2) {\n      const collision = item.x < item2.x + item2.cols && item.x + item.cols > item2.x && item.y < item2.y + item2.rows && item.y + item.rows > item2.y;\n      if (!collision) {\n        return false;\n      }\n      if (!this.$options.allowMultiLayer) {\n        return true;\n      }\n      const defaultLayerIndex = this.$options.defaultLayerIndex;\n      const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n      const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n      return layerIndex === layerIndex2;\n    }\n    ngOnInit() {\n      if (this.options.initCallback) {\n        this.options.initCallback(this);\n      }\n      this.calculateLayout$.pipe(debounceTime(0), takeUntil(this.destroy$)).subscribe(() => this.calculateLayout());\n      this.resize$.pipe(\n      // Cancel previously scheduled DOM timer if `calculateLayout()` has been called\n      // within this time range.\n      switchMap(() => timer(100)), takeUntil(this.destroy$)).subscribe(() => this.resize());\n    }\n    ngOnChanges(changes) {\n      if (changes.options) {\n        this.setOptions();\n        this.options.api = {\n          optionsChanged: this.optionsChanged,\n          resize: this.onResize,\n          getNextPossiblePosition: this.getNextPossiblePosition,\n          getFirstPossiblePosition: this.getFirstPossiblePosition,\n          getLastPossiblePosition: this.getLastPossiblePosition,\n          getItemComponent: item => this.getItemComponent(item)\n        };\n        this.columns = this.$options.minCols;\n        this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\n        this.setGridSize();\n        this.calculateLayout();\n      }\n    }\n    resize() {\n      let height;\n      let width;\n      if (this.$options.gridType === 'fit' && !this.mobile) {\n        width = this.el.offsetWidth;\n        height = this.el.offsetHeight;\n      } else {\n        width = this.el.clientWidth;\n        height = this.el.clientHeight;\n      }\n      if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n        this.onResize();\n      }\n    }\n    setOptions() {\n      this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n      if (!this.$options.disableWindowResize && !this.windowResize) {\n        this.windowResize = this.renderer.listen('window', 'resize', this.onResize);\n      } else if (this.$options.disableWindowResize && this.windowResize) {\n        this.windowResize();\n        this.windowResize = null;\n      }\n      this.emptyCell.updateOptions();\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.previewStyle$.complete();\n      if (this.windowResize) {\n        this.windowResize();\n      }\n      if (this.options && this.options.destroyCallback) {\n        this.options.destroyCallback(this);\n      }\n      if (this.options && this.options.api) {\n        this.options.api.resize = undefined;\n        this.options.api.optionsChanged = undefined;\n        this.options.api.getNextPossiblePosition = undefined;\n        this.options.api = undefined;\n      }\n      this.emptyCell.destroy();\n      this.emptyCell = null;\n      this.compact.destroy();\n      this.compact = null;\n    }\n    checkIfToResize() {\n      const clientWidth = this.el.clientWidth;\n      const offsetWidth = this.el.offsetWidth;\n      const scrollWidth = this.el.scrollWidth;\n      const clientHeight = this.el.clientHeight;\n      const offsetHeight = this.el.offsetHeight;\n      const scrollHeight = this.el.scrollHeight;\n      const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n      const horizontalScrollPresent = clientHeight < offsetHeight && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n      if (verticalScrollPresent) {\n        return false;\n      }\n      return !horizontalScrollPresent;\n    }\n    checkIfMobile() {\n      if (this.$options.useBodyForBreakpoint) {\n        return this.$options.mobileBreakpoint > document.body.clientWidth;\n      } else {\n        return this.$options.mobileBreakpoint > this.curWidth;\n      }\n    }\n    setGridSize() {\n      const el = this.el;\n      let width;\n      let height;\n      if (this.$options.setGridSize || this.$options.gridType === GridType.Fit && !this.mobile) {\n        width = el.offsetWidth;\n        height = el.offsetHeight;\n      } else {\n        width = el.clientWidth;\n        height = el.clientHeight;\n      }\n      this.curWidth = width;\n      this.curHeight = height;\n    }\n    setGridDimensions() {\n      this.setGridSize();\n      if (!this.mobile && this.checkIfMobile()) {\n        this.mobile = !this.mobile;\n        this.renderer.addClass(this.el, 'mobile');\n      } else if (this.mobile && !this.checkIfMobile()) {\n        this.mobile = !this.mobile;\n        this.renderer.removeClass(this.el, 'mobile');\n      }\n      let rows = this.$options.minRows;\n      let columns = this.$options.minCols;\n      let widgetsIndex = this.grid.length - 1;\n      let widget;\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n        if (!widget.notPlaced) {\n          rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n          columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n        }\n      }\n      rows += this.$options.addEmptyRowsCount;\n      if (this.columns !== columns || this.rows !== rows) {\n        this.columns = columns;\n        this.rows = rows;\n        if (this.options.gridSizeChangedCallback) {\n          this.options.gridSizeChangedCallback(this);\n        }\n      }\n    }\n    calculateLayout() {\n      if (this.compact) {\n        this.compact.checkCompact();\n      }\n      this.setGridDimensions();\n      if (this.$options.outerMargin) {\n        let marginWidth = -this.$options.margin;\n        if (this.$options.outerMarginLeft !== null) {\n          marginWidth += this.$options.outerMarginLeft;\n          this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n        } else {\n          marginWidth += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n        }\n        if (this.$options.outerMarginRight !== null) {\n          marginWidth += this.$options.outerMarginRight;\n          this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n        } else {\n          marginWidth += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n        }\n        this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n        let marginHeight = -this.$options.margin;\n        if (this.$options.outerMarginTop !== null) {\n          marginHeight += this.$options.outerMarginTop;\n          this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n        } else {\n          marginHeight += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n        }\n        if (this.$options.outerMarginBottom !== null) {\n          marginHeight += this.$options.outerMarginBottom;\n          this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n        } else {\n          marginHeight += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n        }\n        this.curRowHeight = (this.curHeight - marginHeight) / this.rows * this.$options.rowHeightRatio;\n      } else {\n        this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n        this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows * this.$options.rowHeightRatio;\n        this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n        this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n        this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n        this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n      }\n      this.gridRenderer.updateGridster();\n      if (this.$options.setGridSize) {\n        this.renderer.addClass(this.el, 'gridSize');\n        if (!this.mobile) {\n          this.renderer.setStyle(this.el, 'width', this.columns * this.curColWidth + this.$options.margin + 'px');\n          this.renderer.setStyle(this.el, 'height', this.rows * this.curRowHeight + this.$options.margin + 'px');\n        }\n      } else {\n        this.renderer.removeClass(this.el, 'gridSize');\n        this.renderer.setStyle(this.el, 'width', '');\n        this.renderer.setStyle(this.el, 'height', '');\n      }\n      this.updateGrid();\n      let widgetsIndex = this.grid.length - 1;\n      let widget;\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n        widget.setSize();\n        widget.drag.toggle();\n        widget.resize.toggle();\n      }\n      this.resize$.next();\n    }\n    updateGrid() {\n      if (this.$options.displayGrid === 'always' && !this.mobile) {\n        this.renderer.addClass(this.el, 'display-grid');\n      } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n        this.renderer.addClass(this.el, 'display-grid');\n      } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n        this.renderer.removeClass(this.el, 'display-grid');\n      }\n      this.setGridDimensions();\n      this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\n      this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\n      this.cdRef.markForCheck();\n    }\n    addItem(itemComponent) {\n      if (itemComponent.$item.cols === undefined) {\n        itemComponent.$item.cols = this.$options.defaultItemCols;\n        itemComponent.item.cols = itemComponent.$item.cols;\n        itemComponent.itemChanged();\n      }\n      if (itemComponent.$item.rows === undefined) {\n        itemComponent.$item.rows = this.$options.defaultItemRows;\n        itemComponent.item.rows = itemComponent.$item.rows;\n        itemComponent.itemChanged();\n      }\n      if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n        this.autoPositionItem(itemComponent);\n      } else if (this.checkCollision(itemComponent.$item)) {\n        if (!this.$options.disableWarnings) {\n          itemComponent.notPlaced = true;\n          console.warn(\"Can't be placed in the bounds of the dashboard, trying to auto position!/n\" + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n        }\n        if (!this.$options.disableAutoPositionOnConflict) {\n          this.autoPositionItem(itemComponent);\n        } else {\n          itemComponent.notPlaced = true;\n        }\n      }\n      this.grid.push(itemComponent);\n      this.calculateLayout$.next();\n    }\n    removeItem(itemComponent) {\n      this.grid.splice(this.grid.indexOf(itemComponent), 1);\n      this.calculateLayout$.next();\n      if (this.options.itemRemovedCallback) {\n        this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n      }\n    }\n    checkCollision(item) {\n      let collision = false;\n      if (this.options.itemValidateCallback) {\n        collision = !this.options.itemValidateCallback(item);\n      }\n      if (!collision && this.checkGridCollision(item)) {\n        collision = true;\n      }\n      if (!collision) {\n        const c = this.findItemWithItem(item);\n        if (c) {\n          collision = c;\n        }\n      }\n      return collision;\n    }\n    checkGridCollision(item) {\n      const noNegativePosition = item.y > -1 && item.x > -1;\n      const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n      const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n      const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n      const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n      const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n      const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n      const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n      const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n      const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n      const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n      const area = item.cols * item.rows;\n      const inMinArea = minAreaLimit <= area;\n      const inMaxArea = maxAreaLimit >= area;\n      return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n    }\n    findItemWithItem(item) {\n      let widgetsIndex = 0;\n      let widget;\n      for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n        widget = this.grid[widgetsIndex];\n        if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n          return widget;\n        }\n      }\n      return false;\n    }\n    findItemsWithItem(item) {\n      const a = [];\n      let widgetsIndex = 0;\n      let widget;\n      for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n        widget = this.grid[widgetsIndex];\n        if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n          a.push(widget);\n        }\n      }\n      return a;\n    }\n    autoPositionItem(itemComponent) {\n      if (this.getNextPossiblePosition(itemComponent.$item)) {\n        itemComponent.notPlaced = false;\n        itemComponent.item.x = itemComponent.$item.x;\n        itemComponent.item.y = itemComponent.$item.y;\n        itemComponent.itemChanged();\n      } else {\n        itemComponent.notPlaced = true;\n        if (!this.$options.disableWarnings) {\n          console.warn(\"Can't be placed in the bounds of the dashboard!/n\" + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n        }\n      }\n    }\n    pixelsToPositionX(x, roundingMethod, noLimit) {\n      const position = roundingMethod(x / this.curColWidth);\n      if (noLimit) {\n        return position;\n      } else {\n        return Math.max(position, 0);\n      }\n    }\n    pixelsToPositionY(y, roundingMethod, noLimit) {\n      const position = roundingMethod(y / this.curRowHeight);\n      if (noLimit) {\n        return position;\n      } else {\n        return Math.max(position, 0);\n      }\n    }\n    positionXToPixels(x) {\n      return x * this.curColWidth;\n    }\n    positionYToPixels(y) {\n      return y * this.curRowHeight;\n    }\n    getItemComponent(item) {\n      return this.grid.find(c => c.item === item);\n    }\n    // ------ Functions for swapWhileDragging option\n    // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n    checkCollisionForSwaping(item) {\n      let collision = false;\n      if (this.options.itemValidateCallback) {\n        collision = !this.options.itemValidateCallback(item);\n      }\n      if (!collision && this.checkGridCollision(item)) {\n        collision = true;\n      }\n      if (!collision) {\n        const c = this.findItemWithItemForSwapping(item);\n        if (c) {\n          collision = c;\n        }\n      }\n      return collision;\n    }\n    // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n    findItemWithItemForSwapping(item) {\n      let widgetsIndex = this.grid.length - 1;\n      let widget;\n      for (; widgetsIndex > -1; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n        if (widget.$item !== item && GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n          return widget;\n        }\n      }\n      return false;\n    }\n    previewStyle(drag = false) {\n      if (this.movingItem) {\n        if (this.compact && drag) {\n          this.compact.checkCompactItem(this.movingItem);\n        }\n        this.previewStyle$.next(this.movingItem);\n      } else {\n        this.previewStyle$.next(null);\n      }\n    }\n    // ------ End of functions for swapWhileDragging option\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    static getNewArrayLength(length, overallSize, size) {\n      const newLength = Math.max(length, Math.floor(overallSize / size));\n      if (newLength < 0) {\n        return 0;\n      }\n      if (Number.isFinite(newLength)) {\n        return Math.floor(newLength);\n      }\n      return 0;\n    }\n  }\n  _class2 = GridsterComponent;\n  _class2.ɵfac = function _class2_Factory(t) {\n    return new (t || _class2)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(NgZone));\n  };\n  _class2.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _class2,\n    selectors: [[\"gridster\"]],\n    inputs: {\n      options: \"options\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 4,\n    consts: [[\"class\", \"gridster-column\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gridster-row\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"gridster-preview\", 3, \"gridRenderer\", \"previewStyle$\"], [1, \"gridster-column\", 3, \"ngStyle\"], [1, \"gridster-row\", 3, \"ngStyle\"]],\n    template: function _class2_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, _class2_div_0_Template, 1, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, _class2_div_1_Template, 1, 1, \"div\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelement(3, \"gridster-preview\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridRows);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"gridRenderer\", ctx.gridRenderer)(\"previewStyle$\", ctx.previewStyle$);\n      }\n    },\n    dependencies: [NgForOf, NgStyle, GridsterPreviewComponent],\n    styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"],\n    encapsulation: 2\n  });\n  return GridsterComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass GridsterPush {\n  constructor(gridsterItem) {\n    this.iteration = 0;\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n  destroy() {\n    this.gridster = this.gridsterItem = null;\n  }\n  pushItems(direction, disable) {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      this.iteration = 0;\n      const pushed = this.push(this.gridsterItem, direction);\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n  restoreTempItems() {\n    let i = this.pushedItemsTemp.length - 1;\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n  push(gridsterItem, direction) {\n    if (this.iteration > 100) {\n      console.warn('max iteration reached');\n      return false;\n    }\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n    if (direction === '') {\n      return false;\n    }\n    const conflicts = this.gridster.findItemsWithItem(gridsterItem.$item);\n    const invert = direction === this.fromNorth || direction === this.fromWest;\n    // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\n    // this is done so they don't conflict witch each other and revert positions, keeping the previous order\n    conflicts.sort((a, b) => {\n      if (invert) {\n        return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\n      } else {\n        return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\n      }\n    });\n    let i = 0;\n    let itemCollision;\n    let makePush = true;\n    const pushedItems = [];\n    for (; i < conflicts.length; i++) {\n      itemCollision = conflicts[i];\n      if (itemCollision === this.gridsterItem) {\n        continue;\n      }\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n      const p = this.pushedItemsTemp.indexOf(itemCollision);\n      if (p > -1 && this.pushedItemsTempPath[p].length > 10) {\n        // stop if item is pushed more than 10 times to break infinite loops\n        makePush = false;\n        break;\n      }\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n    this.iteration++;\n    return makePush;\n  }\n  trySouth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n  tryNorth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n  tryEast(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n  tryWest(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n  addToTempPushed(gridsterItem) {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n    this.pushedItemsTempPath[i].push({\n      x: gridsterItem.$item.x,\n      y: gridsterItem.$item.y\n    });\n  }\n  removeFromTempPushed(gridsterItem) {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n    if (!tempPosition) {\n      return;\n    }\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      });\n    }\n  }\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n  removeFromPushedItem(gridsterItem) {\n    const i = this.pushedItems.indexOf(gridsterItem);\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let change = false;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n    return change;\n  }\n}\nlet scrollSensitivity;\nlet scrollSpeed;\nconst intervalDuration = 50;\nlet gridsterElement;\nlet resizeEvent;\nlet resizeEventType;\nlet intervalE;\nlet intervalW;\nlet intervalN;\nlet intervalS;\nfunction scroll(gridster, left, top, width, height, event, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n  const {\n    clientX,\n    clientY\n  } = event;\n  if (!gridster.$options.disableScrollVertical) {\n    if (lastMouse.clientY < clientY && elemBottomOffset < scrollSensitivity) {\n      cancelN();\n      if (resizeEvent && resizeEventType && !resizeEventType.south || intervalS) {\n        return;\n      }\n      intervalS = startVertical(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY > clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n      cancelS();\n      if (resizeEvent && resizeEventType && !resizeEventType.north || intervalN) {\n        return;\n      }\n      intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY !== clientY) {\n      cancelVertical();\n    }\n  }\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n  if (!gridster.$options.disableScrollHorizontal) {\n    if (lastMouse.clientX < clientX && elemRightOffset <= scrollSensitivity) {\n      cancelW();\n      if (resizeEvent && resizeEventType && !resizeEventType.east || intervalE) {\n        return;\n      }\n      intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX > clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n      cancelE();\n      if (resizeEvent && resizeEventType && !resizeEventType.west || intervalW) {\n        return;\n      }\n      intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX !== clientX) {\n      cancelHorizontal();\n    }\n  }\n}\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n  let clientY = lastMouse.clientY;\n  return window.setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX: lastMouse.clientX,\n      clientY\n    });\n  }, intervalDuration);\n}\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n  let clientX = lastMouse.clientX;\n  return window.setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX,\n      clientY: lastMouse.clientY\n    });\n  }, intervalDuration);\n}\nfunction cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = null;\n}\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\nclass GridsterSwap {\n  constructor(gridsterItem) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n  destroy() {\n    this.gridster = this.gridsterItem = this.swapedItem = null;\n  }\n  swapItems() {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n  checkSwapBack() {\n    if (this.swapedItem) {\n      const x = this.swapedItem.$item.x;\n      const y = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n    }\n  }\n  restoreSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n  setSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n  checkSwap(pushedBy) {\n    let gridsterItemCollision;\n    if (this.gridster.$options.swapWhileDragging) {\n      gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n    } else {\n      gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n    }\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      const diffX = copyX - copyCollisionX;\n      const diffY = copyY - copyCollisionY;\n      gridsterItemCollide.$item.x = pushedBy.item.x - diffX;\n      gridsterItemCollide.$item.y = pushedBy.item.y - diffY;\n      pushedBy.$item.x = gridsterItemCollide.item.x + diffX;\n      pushedBy.$item.y = gridsterItemCollide.item.y + diffY;\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n        if (this.gridster.$options.swapWhileDragging) {\n          this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n          this.setSwapItem();\n        }\n      }\n    }\n  }\n}\nconst GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS = 'gridster-item-resizable-handler';\nvar Direction = /*#__PURE__*/function (Direction) {\n  Direction[\"UP\"] = \"UP\";\n  Direction[\"DOWN\"] = \"DOWN\";\n  Direction[\"LEFT\"] = \"LEFT\";\n  Direction[\"RIGHT\"] = \"RIGHT\";\n  return Direction;\n}(Direction || {});\nclass GridsterDraggable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    this.collision = false;\n    this.dragMove = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      GridsterUtils.checkTouchEvent(e);\n      // get the directions of the mouse event\n      let directions = this.getDirections(e);\n      if (this.gridster.options.enableBoundaryControl) {\n        var _this$outerMarginTop, _this$outerMarginLeft, _this$outerMarginRigh, _this$outerMarginBott;\n        // prevent moving up at the top of gridster\n        if (directions.includes(Direction.UP) && this.gridsterItem.el.getBoundingClientRect().top < this.gridster.el.getBoundingClientRect().top + ((_this$outerMarginTop = this.outerMarginTop) !== null && _this$outerMarginTop !== void 0 ? _this$outerMarginTop : this.margin)) {\n          directions = directions.filter(direction => direction != Direction.UP);\n          e = new MouseEvent(e.type, {\n            clientX: e.clientX,\n            clientY: this.lastMouse.clientY\n          });\n        }\n        // prevent moving left at the leftmost column of gridster\n        if (directions.includes(Direction.LEFT) && this.gridsterItem.el.getBoundingClientRect().left < this.gridster.el.getBoundingClientRect().left + ((_this$outerMarginLeft = this.outerMarginLeft) !== null && _this$outerMarginLeft !== void 0 ? _this$outerMarginLeft : this.margin)) {\n          directions = directions.filter(direction => direction != Direction.LEFT);\n          e = new MouseEvent(e.type, {\n            clientX: this.lastMouse.clientX,\n            clientY: e.clientY\n          });\n        }\n        // prevent moving right at the rightmost column of gridster\n        if (directions.includes(Direction.RIGHT) && this.gridsterItem.el.getBoundingClientRect().right > this.gridster.el.getBoundingClientRect().right - ((_this$outerMarginRigh = this.outerMarginRight) !== null && _this$outerMarginRigh !== void 0 ? _this$outerMarginRigh : this.margin)) {\n          directions = directions.filter(direction => direction != Direction.RIGHT);\n          e = new MouseEvent(e.type, {\n            clientX: this.lastMouse.clientX,\n            clientY: e.clientY\n          });\n        }\n        // prevent moving down at the bottom of gridster\n        if (directions.includes(Direction.DOWN) && this.gridsterItem.el.getBoundingClientRect().bottom > this.gridster.el.getBoundingClientRect().bottom - ((_this$outerMarginBott = this.outerMarginBottom) !== null && _this$outerMarginBott !== void 0 ? _this$outerMarginBott : this.margin)) {\n          directions = directions.filter(direction => direction != Direction.DOWN);\n          e = new MouseEvent(e.type, {\n            clientX: e.clientX,\n            clientY: this.lastMouse.clientY\n          });\n        }\n      }\n      // do not change item location when there is no direction to go\n      if (directions.length) {\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition);\n        this.calculateItemPositionFromMousePosition(e);\n      }\n    };\n    this.calculateItemPositionFromMousePosition = e => {\n      if (this.gridster.options.scale) {\n        this.calculateItemPositionWithScale(e, this.gridster.options.scale);\n      } else {\n        this.calculateItemPositionWithoutScale(e);\n      }\n      this.calculateItemPosition();\n      this.lastMouse.clientX = e.clientX;\n      this.lastMouse.clientY = e.clientY;\n      this.zone.run(() => {\n        this.gridster.updateGrid();\n      });\n    };\n    this.dragStop = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      cancelScroll();\n      this.cancelOnBlur();\n      this.mousemove();\n      this.mouseup();\n      this.mouseleave();\n      this.touchmove();\n      this.touchend();\n      this.touchcancel();\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n      this.gridster.dragInProgress = false;\n      this.gridster.updateGrid();\n      this.path = [];\n      if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n        Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeDrag, this.cancelDrag);\n      } else {\n        this.makeDrag();\n      }\n      setTimeout(() => {\n        if (this.gridster) {\n          this.gridster.movingItem = null;\n          this.gridster.previewStyle(true);\n        }\n      });\n    };\n    this.cancelDrag = () => {\n      this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n      this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n      this.gridsterItem.setSize();\n      if (this.push) {\n        this.push.restoreItems();\n      }\n      if (this.swap) {\n        this.swap.restoreSwapItem();\n      }\n      if (this.push) {\n        this.push.destroy();\n        this.push = null;\n      }\n      if (this.swap) {\n        this.swap.destroy();\n        this.swap = null;\n      }\n    };\n    this.makeDrag = () => {\n      if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable && this.gridster.options.draggable.dropOverItemsCallback && this.collision && this.collision !== true && this.collision.$item) {\n        this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n      }\n      this.collision = false;\n      this.gridsterItem.setSize();\n      this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n      if (this.push) {\n        this.push.setPushedItems();\n      }\n      if (this.swap) {\n        this.swap.setSwapItem();\n      }\n      if (this.push) {\n        this.push.destroy();\n        this.push = null;\n      }\n      if (this.swap) {\n        this.swap.destroy();\n        this.swap = null;\n      }\n    };\n    this.dragStartDelay = e => {\n      const target = e.target;\n      if (target.classList.contains(GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS)) {\n        return;\n      }\n      if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n        return;\n      }\n      GridsterUtils.checkTouchEvent(e);\n      if (!this.gridster.$options.draggable.delayStart) {\n        this.dragStart(e);\n        return;\n      }\n      const timeout = setTimeout(() => {\n        this.dragStart(e);\n        cancelDrag();\n      }, this.gridster.$options.draggable.delayStart);\n      const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n      const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n      const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n      const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n      const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n      const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n      function cancelMove(eventMove) {\n        GridsterUtils.checkTouchEvent(eventMove);\n        if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n          cancelDrag();\n        }\n      }\n      function cancelDrag() {\n        clearTimeout(timeout);\n        cancelOnBlur();\n        cancelMouse();\n        cancelMouseLeave();\n        cancelTouchMove();\n        cancelTouchEnd();\n        cancelTouchCancel();\n      }\n    };\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    }\n    this.gridsterItem = this.gridster = this.collision = null;\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n  dragStart(e) {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.outerMarginTop = this.gridster.$options.outerMarginTop;\n    this.outerMarginRight = this.gridster.$options.outerMarginRight;\n    this.outerMarginBottom = this.gridster.$options.outerMarginBottom;\n    this.outerMarginLeft = this.gridster.$options.outerMarginLeft;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.diffLeft = e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left;\n    } else {\n      this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    }\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({\n      x: this.gridsterItem.item.x || 0,\n      y: this.gridsterItem.item.y || 0\n    });\n  }\n  calculateItemPositionWithScale(e, scale) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - this.originalClientX + (e.clientX - this.originalClientX) / scale + this.diffLeft;\n    } else {\n      this.left = this.originalClientX + (e.clientX - this.originalClientX) / scale + this.offsetLeft - this.diffLeft;\n    }\n    this.top = this.originalClientY + (e.clientY - this.originalClientY) / scale + this.offsetTop - this.diffTop;\n  }\n  calculateItemPositionWithoutScale(e) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\n    } else {\n      this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    }\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n  }\n  calculateItemPosition() {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n    this.gridsterItem.$item.y = this.positionY;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({\n          x: this.gridsterItem.$item.x,\n          y: this.gridsterItem.$item.y\n        });\n      }\n      this.push.checkPushBack();\n    } else {\n      // reset the collision when you drag and drop on an adjacent cell that is not empty\n      // and go back to the cell you were in from the beginning,\n      // this is to prevent `dropOverItemsCallback'\n      this.collision = false;\n    }\n    this.gridster.previewStyle(true);\n  }\n  toggle() {\n    const enableDrag = this.gridsterItem.canBeDragged();\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartDelay);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartDelay);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n  /**\n   * Returns the list of directions for given mouse event\n   * @param e Mouse event\n   * */\n  getDirections(e) {\n    const directions = [];\n    if (this.lastMouse.clientX === 0 && this.lastMouse.clientY === 0) {\n      this.lastMouse.clientY = e.clientY;\n      this.lastMouse.clientX = e.clientX;\n    }\n    if (this.lastMouse.clientY > e.clientY) {\n      directions.push(Direction.UP);\n    }\n    if (this.lastMouse.clientY < e.clientY) {\n      directions.push(Direction.DOWN);\n    }\n    if (this.lastMouse.clientX < e.clientX) {\n      directions.push(Direction.RIGHT);\n    }\n    if (this.lastMouse.clientX > e.clientX) {\n      directions.push(Direction.LEFT);\n    }\n    return directions;\n  }\n}\nclass GridsterPushResize {\n  constructor(gridsterItem) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n  destroy() {\n    this.gridster = this.gridsterItem = null;\n  }\n  pushItems(direction) {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n  push(gridsterItem, direction) {\n    const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n    return false;\n  }\n  trySouth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n  tryNorth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n  tryEast(gridsterItemCollide, gridsterItem, direction) {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n  tryWest(gridsterItemCollide, gridsterItem, direction) {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0,\n        cols: gridsterItem.item.cols || 0,\n        rows: gridsterItem.item.rows || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      });\n    }\n  }\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let cols;\n    let rows;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n    return false;\n  }\n}\nclass GridsterResizable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    /**\n     * The direction function may reference any of the `GridsterResizable` class methods, that are\n     * responsible for gridster resize when the `dragmove` event is being handled. E.g. it may reference\n     * the `handleNorth` method when the north handle is pressed and moved by a mouse.\n     */\n    this.directionFunction = null;\n    this.dragMove = e => {\n      if (this.directionFunction === null) {\n        throw new Error('The `directionFunction` has not been set before calling `dragMove`.');\n      }\n      e.stopPropagation();\n      e.preventDefault();\n      GridsterUtils.checkTouchEvent(e);\n      this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n      this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n      scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction, true, this.resizeEventScrollType);\n      const scale = this.gridster.options.scale || 1;\n      this.directionFunction({\n        clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\n        clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\n      });\n      this.lastMouse.clientX = e.clientX;\n      this.lastMouse.clientY = e.clientY;\n      this.zone.run(() => {\n        this.gridster.updateGrid();\n      });\n    };\n    this.dragStop = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      cancelScroll();\n      this.mousemove();\n      this.mouseup();\n      this.mouseleave();\n      this.cancelOnBlur();\n      this.touchmove();\n      this.touchend();\n      this.touchcancel();\n      this.gridster.dragInProgress = false;\n      this.gridster.updateGrid();\n      if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n        Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeResize, this.cancelResize);\n      } else {\n        this.makeResize();\n      }\n      setTimeout(() => {\n        this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n        if (this.gridster) {\n          this.gridster.movingItem = null;\n          this.gridster.previewStyle();\n        }\n      });\n    };\n    this.cancelResize = () => {\n      this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n      this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n      this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n      this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n      this.gridsterItem.setSize();\n      this.push.restoreItems();\n      this.pushResize.restoreItems();\n      this.push.destroy();\n      this.push = null;\n      this.pushResize.destroy();\n      this.pushResize = null;\n    };\n    this.makeResize = () => {\n      this.gridsterItem.setSize();\n      this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n      this.push.setPushedItems();\n      this.pushResize.setPushedItems();\n      this.push.destroy();\n      this.push = null;\n      this.pushResize.destroy();\n      this.pushResize = null;\n    };\n    this.handleNorth = e => {\n      this.top = e.clientY + this.offsetTop - this.diffTop;\n      this.height = this.bottom - this.top;\n      if (this.minHeight > this.height) {\n        this.height = this.minHeight;\n        this.top = this.bottom - this.minHeight;\n      } else if (this.gridster.options.enableBoundaryControl) {\n        this.top = Math.max(0, this.top);\n        this.height = this.bottom - this.top;\n      }\n      const marginTop = this.gridster.options.pushItems ? this.margin : 0;\n      this.newPosition = this.gridster.pixelsToPositionY(this.top + marginTop, Math.floor);\n      if (this.gridsterItem.$item.y !== this.newPosition) {\n        this.itemBackup[1] = this.gridsterItem.$item.y;\n        this.itemBackup[3] = this.gridsterItem.$item.rows;\n        this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n        this.gridsterItem.$item.y = this.newPosition;\n        this.pushResize.pushItems(this.pushResize.fromSouth);\n        this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.y = this.itemBackup[1];\n          this.gridsterItem.$item.rows = this.itemBackup[3];\n          this.top = this.gridster.positionYToPixels(this.gridsterItem.$item.y);\n          this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n          this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n      this.setItemTop(this.top);\n      this.setItemHeight(this.height);\n    };\n    this.handleWest = e => {\n      const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n      this.left = clientX + this.offsetLeft - this.diffLeft;\n      this.width = this.right - this.left;\n      if (this.minWidth > this.width) {\n        this.width = this.minWidth;\n        this.left = this.right - this.minWidth;\n      } else if (this.gridster.options.enableBoundaryControl) {\n        this.left = Math.max(0, this.left);\n        this.width = this.right - this.left;\n      }\n      const marginLeft = this.gridster.options.pushItems ? this.margin : 0;\n      this.newPosition = this.gridster.pixelsToPositionX(this.left + marginLeft, Math.floor);\n      if (this.gridsterItem.$item.x !== this.newPosition) {\n        this.itemBackup[0] = this.gridsterItem.$item.x;\n        this.itemBackup[2] = this.gridsterItem.$item.cols;\n        this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n        this.gridsterItem.$item.x = this.newPosition;\n        this.pushResize.pushItems(this.pushResize.fromEast);\n        this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.x = this.itemBackup[0];\n          this.gridsterItem.$item.cols = this.itemBackup[2];\n          this.left = this.gridster.positionXToPixels(this.gridsterItem.$item.x);\n          this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n          this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n      this.setItemLeft(this.left);\n      this.setItemWidth(this.width);\n    };\n    this.handleSouth = e => {\n      this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n      if (this.minHeight > this.height) {\n        this.height = this.minHeight;\n      }\n      this.bottom = this.top + this.height;\n      if (this.gridster.options.enableBoundaryControl) {\n        var _this$outerMarginBott2;\n        const margin = (_this$outerMarginBott2 = this.outerMarginBottom) !== null && _this$outerMarginBott2 !== void 0 ? _this$outerMarginBott2 : this.margin;\n        const box = this.gridster.el.getBoundingClientRect();\n        this.bottom = Math.min(this.bottom, box.bottom - box.top - 2 * margin);\n        this.height = this.bottom - this.top;\n      }\n      const marginBottom = this.gridster.options.pushItems ? 0 : this.margin;\n      this.newPosition = this.gridster.pixelsToPositionY(this.bottom + marginBottom, Math.ceil);\n      if (this.gridsterItem.$item.y + this.gridsterItem.$item.rows !== this.newPosition) {\n        this.itemBackup[3] = this.gridsterItem.$item.rows;\n        this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n        this.pushResize.pushItems(this.pushResize.fromNorth);\n        this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.rows = this.itemBackup[3];\n          this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n      this.setItemHeight(this.height);\n    };\n    this.handleEast = e => {\n      const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n      this.width = clientX + this.offsetLeft - this.diffRight - this.left;\n      if (this.minWidth > this.width) {\n        this.width = this.minWidth;\n      }\n      this.right = this.left + this.width;\n      if (this.gridster.options.enableBoundaryControl) {\n        var _this$outerMarginRigh2;\n        const margin = (_this$outerMarginRigh2 = this.outerMarginRight) !== null && _this$outerMarginRigh2 !== void 0 ? _this$outerMarginRigh2 : this.margin;\n        const box = this.gridster.el.getBoundingClientRect();\n        this.right = Math.min(this.right, box.right - box.left - 2 * margin);\n        this.width = this.right - this.left;\n      }\n      const marginRight = this.gridster.options.pushItems ? 0 : this.margin;\n      this.newPosition = this.gridster.pixelsToPositionX(this.right + marginRight, Math.ceil);\n      if (this.gridsterItem.$item.x + this.gridsterItem.$item.cols !== this.newPosition) {\n        this.itemBackup[2] = this.gridsterItem.$item.cols;\n        this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n        this.pushResize.pushItems(this.pushResize.fromWest);\n        this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.cols = this.itemBackup[2];\n          this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n      this.setItemWidth(this.width);\n    };\n    this.handleNorthWest = e => {\n      this.handleNorth(e);\n      this.handleWest(e);\n    };\n    this.handleNorthEast = e => {\n      this.handleNorth(e);\n      this.handleEast(e);\n    };\n    this.handleSouthWest = e => {\n      this.handleSouth(e);\n      this.handleWest(e);\n    };\n    this.handleSouthEast = e => {\n      this.handleSouth(e);\n      this.handleEast(e);\n    };\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {\n      west: false,\n      east: false,\n      north: false,\n      south: false\n    };\n  }\n  destroy() {\n    var _this$gridster;\n    (_this$gridster = this.gridster) === null || _this$gridster === void 0 || _this$gridster.previewStyle();\n    this.gridster = this.gridsterItem = null;\n  }\n  dragStart(e) {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.outerMarginTop = this.gridster.$options.outerMarginTop;\n    this.outerMarginRight = this.gridster.$options.outerMarginRight;\n    this.outerMarginBottom = this.gridster.$options.outerMarginBottom;\n    this.outerMarginLeft = this.gridster.$options.outerMarginLeft;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows) - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols) - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    const {\n      classList\n    } = e.target;\n    if (classList.contains('handle-n')) {\n      this.resizeEventScrollType.north = true;\n      this.directionFunction = this.handleNorth;\n    } else if (classList.contains('handle-w')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleEast;\n      } else {\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleWest;\n      }\n    } else if (classList.contains('handle-s')) {\n      this.resizeEventScrollType.south = true;\n      this.directionFunction = this.handleSouth;\n    } else if (classList.contains('handle-e')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleWest;\n      } else {\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleEast;\n      }\n    } else if (classList.contains('handle-nw')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleNorthEast;\n      } else {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleNorthWest;\n      }\n    } else if (classList.contains('handle-ne')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleNorthWest;\n      } else {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleNorthEast;\n      }\n    } else if (classList.contains('handle-sw')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleSouthEast;\n      } else {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleSouthWest;\n      }\n    } else if (classList.contains('handle-se')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleSouthWest;\n      } else {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleSouthEast;\n      }\n    }\n  }\n  toggle() {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n    this.resizableHandles = this.gridsterItem.getResizableHandles();\n  }\n  dragStartDelay(e) {\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const {\n      cancelMouse,\n      cancelMouseLeave,\n      cancelOnBlur,\n      cancelTouchMove,\n      cancelTouchEnd,\n      cancelTouchCancel\n    } = this.zone.runOutsideAngular(() => {\n      // Note: all of these events are being added within the `<root>` zone since they all\n      // don't do any view updates and don't require Angular running change detection.\n      // All event listeners call `cancelDrag` once the event is dispatched, the `cancelDrag`\n      // is responsible only for removing event listeners.\n      const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n      const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n      const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n      const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n      const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n      const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n      return {\n        cancelMouse,\n        cancelMouseLeave,\n        cancelOnBlur,\n        cancelTouchMove,\n        cancelTouchEnd,\n        cancelTouchCancel\n      };\n    });\n    function cancelMove(eventMove) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n  setItemTop(top) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n  }\n  setItemLeft(left) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n  }\n  setItemHeight(height) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n  setItemWidth(width) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n}\nlet GridsterItemComponent = /*#__PURE__*/(() => {\n  var _class3;\n  class GridsterItemComponent {\n    get zIndex() {\n      return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n    }\n    constructor(el, gridster, renderer, zone) {\n      this.renderer = renderer;\n      this.zone = zone;\n      this.itemInit = new EventEmitter();\n      this.itemChange = new EventEmitter();\n      this.itemResize = new EventEmitter();\n      this.el = el.nativeElement;\n      this.$item = {\n        cols: -1,\n        rows: -1,\n        x: -1,\n        y: -1\n      };\n      this.gridster = gridster;\n      this.drag = new GridsterDraggable(this, gridster, this.zone);\n      this.resize = new GridsterResizable(this, gridster, this.zone);\n    }\n    ngOnInit() {\n      this.gridster.addItem(this);\n    }\n    ngOnChanges(changes) {\n      if (changes.item) {\n        this.updateOptions();\n        if (!this.init) {\n          this.gridster.calculateLayout$.next();\n        }\n      }\n      if (changes.item && changes.item.previousValue) {\n        this.setSize();\n      }\n    }\n    updateOptions() {\n      this.$item = GridsterUtils.merge(this.$item, this.item, {\n        cols: undefined,\n        rows: undefined,\n        x: undefined,\n        y: undefined,\n        layerIndex: undefined,\n        dragEnabled: undefined,\n        resizeEnabled: undefined,\n        compactEnabled: undefined,\n        maxItemRows: undefined,\n        minItemRows: undefined,\n        maxItemCols: undefined,\n        minItemCols: undefined,\n        maxItemArea: undefined,\n        minItemArea: undefined,\n        resizableHandles: {\n          s: undefined,\n          e: undefined,\n          n: undefined,\n          w: undefined,\n          se: undefined,\n          ne: undefined,\n          sw: undefined,\n          nw: undefined\n        }\n      });\n    }\n    ngOnDestroy() {\n      this.gridster.removeItem(this);\n      this.drag.destroy();\n      this.resize.destroy();\n      this.gridster = this.drag = this.resize = null;\n    }\n    setSize() {\n      this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n      this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n      this.updateItemSize();\n    }\n    updateItemSize() {\n      const top = this.$item.y * this.gridster.curRowHeight;\n      const left = this.$item.x * this.gridster.curColWidth;\n      const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n      const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n      this.top = top;\n      this.left = left;\n      if (!this.init && width > 0 && height > 0) {\n        this.init = true;\n        if (this.item.initCallback) {\n          this.item.initCallback(this.item, this);\n        }\n        if (this.gridster.options.itemInitCallback) {\n          this.gridster.options.itemInitCallback(this.item, this);\n        }\n        this.itemInit.next({\n          item: this.item,\n          itemComponent: this\n        });\n        if (this.gridster.$options.scrollToNewItems) {\n          this.el.scrollIntoView(false);\n        }\n      }\n      if (width !== this.width || height !== this.height) {\n        this.width = width;\n        this.height = height;\n        if (this.gridster.options.itemResizeCallback) {\n          this.gridster.options.itemResizeCallback(this.item, this);\n        }\n        this.itemResize.next({\n          item: this.item,\n          itemComponent: this\n        });\n      }\n    }\n    itemChanged() {\n      if (this.gridster.options.itemChangeCallback) {\n        this.gridster.options.itemChangeCallback(this.item, this);\n      }\n      this.itemChange.next({\n        item: this.item,\n        itemComponent: this\n      });\n    }\n    checkItemChanges(newValue, oldValue) {\n      if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n        return;\n      }\n      if (this.gridster.checkCollision(this.$item)) {\n        this.$item.x = oldValue.x || 0;\n        this.$item.y = oldValue.y || 0;\n        this.$item.cols = oldValue.cols || 1;\n        this.$item.rows = oldValue.rows || 1;\n        this.setSize();\n      } else {\n        this.item.cols = this.$item.cols;\n        this.item.rows = this.$item.rows;\n        this.item.x = this.$item.x;\n        this.item.y = this.$item.y;\n        this.gridster.calculateLayout$.next();\n        this.itemChanged();\n      }\n    }\n    canBeDragged() {\n      const gridDragEnabled = this.gridster.$options.draggable.enabled;\n      const itemDragEnabled = this.$item.dragEnabled === undefined ? gridDragEnabled : this.$item.dragEnabled;\n      return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n    }\n    canBeResized() {\n      const gridResizable = this.gridster.$options.resizable.enabled;\n      const itemResizable = this.$item.resizeEnabled === undefined ? gridResizable : this.$item.resizeEnabled;\n      return !this.gridster.mobile && gridResizable && itemResizable;\n    }\n    getResizableHandles() {\n      const gridResizableHandles = this.gridster.$options.resizable.handles;\n      const itemResizableHandles = this.$item.resizableHandles;\n      // use grid settings if no settings are provided for the item.\n      if (itemResizableHandles === undefined) {\n        return gridResizableHandles;\n      }\n      // else merge the settings\n      return {\n        ...gridResizableHandles,\n        ...itemResizableHandles\n      };\n    }\n    bringToFront(offset) {\n      if (offset && offset <= 0) {\n        return;\n      }\n      const layerIndex = this.getLayerIndex();\n      const topIndex = this.gridster.$options.maxLayerIndex;\n      if (layerIndex < topIndex) {\n        const targetIndex = offset ? layerIndex + offset : topIndex;\n        this.item.layerIndex = this.$item.layerIndex = targetIndex > topIndex ? topIndex : targetIndex;\n      }\n    }\n    sendToBack(offset) {\n      if (offset && offset <= 0) {\n        return;\n      }\n      const layerIndex = this.getLayerIndex();\n      if (layerIndex > 0) {\n        const targetIndex = offset ? layerIndex - offset : 0;\n        this.item.layerIndex = this.$item.layerIndex = targetIndex < 0 ? 0 : targetIndex;\n      }\n    }\n    getLayerIndex() {\n      if (this.item.layerIndex !== undefined) {\n        return this.item.layerIndex;\n      }\n      if (this.gridster.$options.defaultLayerIndex !== undefined) {\n        return this.gridster.$options.defaultLayerIndex;\n      }\n      return 0;\n    }\n  }\n  _class3 = GridsterItemComponent;\n  _class3.ɵfac = function _class3_Factory(t) {\n    return new (t || _class3)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(GridsterComponent), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(NgZone));\n  };\n  _class3.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _class3,\n    selectors: [[\"gridster-item\"]],\n    hostVars: 2,\n    hostBindings: function _class3_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"z-index\", ctx.zIndex);\n      }\n    },\n    inputs: {\n      item: \"item\"\n    },\n    outputs: {\n      itemInit: \"itemInit\",\n      itemChange: \"itemChange\",\n      itemResize: \"itemResize\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c0,\n    decls: 9,\n    vars: 8,\n    consts: [[\"class\", \"gridster-item-resizable-handler handle-s\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-e\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-n\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-w\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-se\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-ne\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-sw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-nw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [1, \"gridster-item-resizable-handler\", \"handle-s\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-e\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-n\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-w\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-se\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-ne\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-sw\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-nw\", 3, \"mousedown\", \"touchstart\"]],\n    template: function _class3_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵtemplate(1, _class3_div_1_Template, 1, 0, \"div\", 0);\n        i0.ɵɵtemplate(2, _class3_div_2_Template, 1, 0, \"div\", 1);\n        i0.ɵɵtemplate(3, _class3_div_3_Template, 1, 0, \"div\", 2);\n        i0.ɵɵtemplate(4, _class3_div_4_Template, 1, 0, \"div\", 3);\n        i0.ɵɵtemplate(5, _class3_div_5_Template, 1, 0, \"div\", 4);\n        i0.ɵɵtemplate(6, _class3_div_6_Template, 1, 0, \"div\", 5);\n        i0.ɵɵtemplate(7, _class3_div_7_Template, 1, 0, \"div\", 6);\n        i0.ɵɵtemplate(8, _class3_div_8_Template, 1, 0, \"div\", 7);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.s) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.e) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.n) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.w) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.se) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.ne) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.sw) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.nw) && ctx.resize.resizeEnabled);\n      }\n    },\n    dependencies: [NgIf],\n    styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"],\n    encapsulation: 2\n  });\n  return GridsterItemComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass GridsterItemComponentInterface {}\nclass GridsterComponentInterface {}\nlet GridsterModule = /*#__PURE__*/(() => {\n  var _class4;\n  class GridsterModule {}\n  _class4 = GridsterModule;\n  _class4.ɵfac = function _class4_Factory(t) {\n    return new (t || _class4)();\n  };\n  _class4.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _class4\n  });\n  _class4.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return GridsterModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of gridster\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CompactType, DirTypes, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap };\n//# sourceMappingURL=angular-gridster2.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}