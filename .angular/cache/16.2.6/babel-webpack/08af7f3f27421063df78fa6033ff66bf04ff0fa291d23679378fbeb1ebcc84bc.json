{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HoangN/Desktop/NW/LTC_GUI/base_ltc_clarity/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { onFirstInteraction as t, onChildListMutation as s } from \"../utils/events.js\";\nimport { getFlattenedDOMTree as e, getFlattenedFocusableItems as i } from \"../utils/traversal.js\";\nimport { contextMenuClick as o } from \"../utils/dom.js\";\nimport { validKeyNavigationCode as h } from \"../utils/keycodes.js\";\nimport { initializeKeyListItems as l, simpleFocusable as r, getActiveElement as n, setActiveKeyListItem as c, focusElement as d } from \"../utils/focus.js\";\nimport { getNextKeyGridItem as a } from \"./key-navigation.utils.js\";\nfunction u() {\n  return t => t.addInitializer(t => new f(t));\n}\nclass f {\n  constructor(t) {\n    this.host = t, this.observers = [], this.host.addController(this);\n  }\n  get hostGrid() {\n    return this.host.keyNavGrid ? this.host.keyNavGrid : this.host;\n  }\n  get hostRows() {\n    const t = Array.from(this.host.rows);\n    return this.host.columnRow && t.unshift(this.host.columnRow), t;\n  }\n  get hostCells() {\n    const t = Array.from(this.host.cells);\n    return this.host.columns && t.unshift(...Array.from(this.host.columns)), t;\n  }\n  get activeCell() {\n    return Array.from(this.hostCells).find(t => 0 === t.tabIndex);\n  }\n  hostConnected() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.host.updateComplete, t(_this.host).then(() => {\n        l(_this.hostCells), _this.hostGrid.addEventListener(\"mouseup\", t => _this.clickCell(t)), _this.hostGrid.addEventListener(\"keydown\", t => _this.keynavCell(t)), _this.hostGrid.addEventListener(\"keyup\", t => _this.updateCellActivation(t));\n      }), _this.observers.push(s(_this.host, () => l(_this.hostCells)));\n    })();\n  }\n  hostDisconnected() {\n    this.observers.forEach(t => t === null || t === void 0 ? void 0 : t.disconnect());\n  }\n  clickCell(t) {\n    if (!o(t)) {\n      const s = t.composedPath().find(t => this.hostCells.find(s => s === t));\n      s && this.setActiveCell(t, s);\n    }\n  }\n  keynavCell(t) {\n    if (h(t) && r(n())) {\n      const {\n          x: s,\n          y: i\n        } = a(this.hostCells, this.hostRows, {\n          code: t.code,\n          ctrlKey: t.ctrlKey,\n          dir: this.host.dir\n        }),\n        o = Array.from(e(this.hostRows[i])).filter(t => !!this.hostCells.find(s => s === t))[s];\n      this.setActiveCell(t, o), t.preventDefault();\n    }\n  }\n  setActiveCell(t, s) {\n    c(this.hostCells, s);\n    const e = i(s),\n      o = e.filter(t => r(t));\n    1 === o.length && 1 === e.length ? d(o[0]) : d(s), s.dispatchEvent(new CustomEvent(\"cdsKeyChange\", {\n      bubbles: !0,\n      detail: {\n        code: t.code,\n        shiftKey: t.shiftKey,\n        activeItem: s\n      }\n    }));\n  }\n  updateCellActivation(t) {\n    var _this$activeCell, _i$;\n    \"Escape\" === t.code && (_this$activeCell = this.activeCell) !== null && _this$activeCell !== void 0 && _this$activeCell.focus(), \"Enter\" === t.code && this.activeCell === t.composedPath()[0] && ((_i$ = i(this.activeCell)[0]) === null || _i$ === void 0 ? void 0 : _i$.focus());\n  }\n}\nexport { f as KeyNavigationGridController, u as keyNavigationGrid };\n//# sourceMappingURL=key-navigation-grid.controller.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}